%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: total_delay_minimization.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: anselme
%%CreationDate: 8/20/2018, 9:04:10 PM
%%BoundingBox: 0 0 411 303
%%HiResBoundingBox: 0 0 410.4955 302.6922
%%CropBox: 0 0 410.4955 302.6922
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-08-20T21:02:05+09:00"
   xmp:CreatorTool="matplotlib 2.0.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -302.692 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 302.692 li
410.495 302.692 li
410.495 0 li
cp
clp
gsave
-.969551 303.362 mo
411.03 303.362 li
411.03 -.638489 li
-.969551 -.638489 li
cp
clp
-5.96955 309.362 mo
417.535 309.362 li
417.535 -4.91611 li
-5.96955 -4.91611 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
95.8009 272.693 mo
95.8009 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
92.9689 282.53 mo
94.0729 282.447 li
94.1449 282.987 94.3369 283.395 94.6369 283.659 cv
94.9369 283.935 95.2969 284.066 95.7169 284.066 cv
96.2209 284.066 96.6529 283.875 97.0129 283.491 cv
97.3609 283.107 97.5409 282.603 97.5409 281.966 cv
97.5409 281.366 97.3609 280.898 97.0249 280.551 cv
96.6889 280.202 96.2449 280.022 95.7049 280.022 cv
95.3689 280.022 95.0569 280.107 94.7809 280.263 cv
94.5049 280.418 94.2889 280.611 94.1449 280.85 cv
93.1489 280.73 li
93.9769 276.315 li
98.2489 276.315 li
98.2489 277.323 li
94.8289 277.323 li
94.3609 279.626 li
94.8769 279.267 95.4169 279.086 95.9809 279.086 cv
96.7249 279.086 97.3609 279.35 97.8769 279.866 cv
98.3929 280.395 98.6569 281.055 98.6569 281.871 cv
98.6569 282.651 98.4289 283.323 97.9729 283.887 cv
97.4209 284.582 96.6769 284.918 95.7169 284.918 cv
94.9369 284.918 94.3009 284.702 93.8089 284.271 cv
93.3049 283.839 93.0289 283.263 92.9689 282.53 cv
1 /0 /CSD get_res sepcs
.85 sep
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
157.373 272.693 mo
157.373 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
155.177 284.786 mo
154.121 284.786 li
154.121 278.066 li
153.857 278.306 153.521 278.559 153.113 278.798 cv
152.705 279.039 152.333 279.219 152.009 279.339 cv
152.009 278.319 li
152.597 278.043 153.113 277.707 153.557 277.31 cv
153.989 276.927 154.301 276.543 154.493 276.159 cv
155.177 276.159 li
155.177 284.786 li
f
157.877 280.551 mo
157.877 279.543 157.973 278.727 158.189 278.103 cv
158.393 277.478 158.705 276.999 159.113 276.663 cv
159.521 276.327 160.049 276.159 160.673 276.159 cv
161.129 276.159 161.537 276.254 161.885 276.447 cv
162.221 276.638 162.509 276.902 162.737 277.25 cv
162.965 277.599 163.145 278.018 163.277 278.522 cv
163.397 279.026 163.469 279.711 163.469 280.551 cv
163.469 281.559 163.361 282.375 163.157 282.999 cv
162.953 283.622 162.641 284.09 162.233 284.427 cv
161.825 284.763 161.297 284.918 160.673 284.918 cv
159.833 284.918 159.185 284.63 158.717 284.043 cv
158.153 283.335 157.877 282.171 157.877 280.551 cv
158.957 280.551 mo
158.957 281.966 159.113 282.902 159.449 283.371 cv
159.773 283.839 160.181 284.066 160.673 284.066 cv
161.153 284.066 161.549 283.839 161.885 283.371 cv
162.221 282.902 162.389 281.966 162.389 280.551 cv
162.389 279.134 162.221 278.198 161.885 277.73 cv
161.549 277.275 161.141 277.034 160.661 277.034 cv
160.169 277.034 159.785 277.238 159.497 277.646 cv
159.137 278.174 158.957 279.146 158.957 280.551 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
218.946 272.693 mo
218.946 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
216.75 284.786 mo
215.694 284.786 li
215.694 278.066 li
215.43 278.306 215.094 278.559 214.686 278.798 cv
214.278 279.039 213.906 279.219 213.582 279.339 cv
213.582 278.319 li
214.17 278.043 214.686 277.707 215.13 277.31 cv
215.562 276.927 215.874 276.543 216.066 276.159 cv
216.75 276.159 li
216.75 284.786 li
f
219.45 282.53 mo
220.554 282.447 li
220.626 282.987 220.818 283.395 221.118 283.659 cv
221.418 283.935 221.778 284.066 222.198 284.066 cv
222.702 284.066 223.134 283.875 223.494 283.491 cv
223.842 283.107 224.022 282.603 224.022 281.966 cv
224.022 281.366 223.842 280.898 223.506 280.551 cv
223.17 280.202 222.726 280.022 222.186 280.022 cv
221.85 280.022 221.538 280.107 221.262 280.263 cv
220.986 280.418 220.77 280.611 220.626 280.85 cv
219.63 280.73 li
220.458 276.315 li
224.73 276.315 li
224.73 277.323 li
221.31 277.323 li
220.842 279.626 li
221.358 279.267 221.898 279.086 222.462 279.086 cv
223.206 279.086 223.842 279.35 224.358 279.866 cv
224.874 280.395 225.138 281.055 225.138 281.871 cv
225.138 282.651 224.91 283.323 224.454 283.887 cv
223.902 284.582 223.158 284.918 222.198 284.918 cv
221.418 284.918 220.782 284.702 220.29 284.271 cv
219.786 283.839 219.51 283.263 219.45 282.53 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
280.518 272.693 mo
280.518 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
279.882 283.779 mo
279.882 284.786 li
274.206 284.786 li
274.194 284.534 274.242 284.294 274.338 284.055 cv
274.482 283.671 274.71 283.298 275.022 282.914 cv
275.334 282.543 275.802 282.111 276.402 281.607 cv
277.338 280.85 277.962 280.25 278.298 279.794 cv
278.622 279.35 278.79 278.931 278.79 278.522 cv
278.79 278.115 278.634 277.754 278.334 277.466 cv
278.034 277.178 277.65 277.034 277.17 277.034 cv
276.666 277.034 276.258 277.19 275.958 277.491 cv
275.646 277.802 275.49 278.223 275.49 278.763 cv
274.41 278.642 li
274.482 277.839 274.758 277.227 275.238 276.794 cv
275.718 276.375 276.378 276.159 277.194 276.159 cv
278.01 276.159 278.67 276.398 279.15 276.854 cv
279.63 277.31 279.87 277.875 279.87 278.547 cv
279.87 278.895 279.798 279.23 279.654 279.566 cv
279.51 279.902 279.282 280.25 278.958 280.611 cv
278.634 280.983 278.094 281.487 277.338 282.122 cv
276.702 282.651 276.294 283.01 276.114 283.202 cv
275.934 283.395 275.79 283.586 275.67 283.779 cv
279.882 283.779 li
f
281.022 280.551 mo
281.022 279.543 281.118 278.727 281.334 278.103 cv
281.538 277.478 281.85 276.999 282.258 276.663 cv
282.666 276.327 283.194 276.159 283.818 276.159 cv
284.274 276.159 284.682 276.254 285.03 276.447 cv
285.366 276.638 285.654 276.902 285.882 277.25 cv
286.11 277.599 286.29 278.018 286.422 278.522 cv
286.542 279.026 286.614 279.711 286.614 280.551 cv
286.614 281.559 286.506 282.375 286.302 282.999 cv
286.098 283.622 285.786 284.09 285.378 284.427 cv
284.97 284.763 284.442 284.918 283.818 284.918 cv
282.978 284.918 282.33 284.63 281.862 284.043 cv
281.298 283.335 281.022 282.171 281.022 280.551 cv
282.102 280.551 mo
282.102 281.966 282.258 282.902 282.594 283.371 cv
282.918 283.839 283.326 284.066 283.818 284.066 cv
284.298 284.066 284.694 283.839 285.03 283.371 cv
285.366 282.902 285.534 281.966 285.534 280.551 cv
285.534 279.134 285.366 278.198 285.03 277.73 cv
284.694 277.275 284.286 277.034 283.806 277.034 cv
283.314 277.034 282.93 277.238 282.642 277.646 cv
282.282 278.174 282.102 279.146 282.102 280.551 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
342.091 272.693 mo
342.091 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
341.455 283.779 mo
341.455 284.786 li
335.779 284.786 li
335.767 284.534 335.815 284.294 335.911 284.055 cv
336.055 283.671 336.283 283.298 336.595 282.914 cv
336.907 282.543 337.375 282.111 337.975 281.607 cv
338.911 280.85 339.535 280.25 339.871 279.794 cv
340.195 279.35 340.363 278.931 340.363 278.522 cv
340.363 278.115 340.207 277.754 339.907 277.466 cv
339.607 277.178 339.223 277.034 338.743 277.034 cv
338.239 277.034 337.831 277.19 337.531 277.491 cv
337.219 277.802 337.063 278.223 337.063 278.763 cv
335.983 278.642 li
336.055 277.839 336.331 277.227 336.811 276.794 cv
337.291 276.375 337.951 276.159 338.767 276.159 cv
339.583 276.159 340.243 276.398 340.723 276.854 cv
341.203 277.31 341.443 277.875 341.443 278.547 cv
341.443 278.895 341.371 279.23 341.227 279.566 cv
341.083 279.902 340.855 280.25 340.531 280.611 cv
340.207 280.983 339.667 281.487 338.911 282.122 cv
338.275 282.651 337.867 283.01 337.687 283.202 cv
337.507 283.395 337.363 283.586 337.243 283.779 cv
341.455 283.779 li
f
342.595 282.53 mo
343.699 282.447 li
343.771 282.987 343.963 283.395 344.263 283.659 cv
344.563 283.935 344.923 284.066 345.343 284.066 cv
345.847 284.066 346.279 283.875 346.639 283.491 cv
346.987 283.107 347.167 282.603 347.167 281.966 cv
347.167 281.366 346.987 280.898 346.651 280.551 cv
346.315 280.202 345.871 280.022 345.331 280.022 cv
344.995 280.022 344.683 280.107 344.407 280.263 cv
344.131 280.418 343.915 280.611 343.771 280.85 cv
342.775 280.73 li
343.603 276.315 li
347.875 276.315 li
347.875 277.323 li
344.455 277.323 li
343.987 279.626 li
344.503 279.267 345.043 279.086 345.607 279.086 cv
346.351 279.086 346.987 279.35 347.503 279.866 cv
348.019 280.395 348.283 281.055 348.283 281.871 cv
348.283 282.651 348.055 283.323 347.599 283.887 cv
347.047 284.582 346.303 284.918 345.343 284.918 cv
344.563 284.918 343.927 284.702 343.435 284.271 cv
342.931 283.839 342.655 283.263 342.595 282.53 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
403.663 272.693 mo
403.663 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
397.495 282.518 mo
398.551 282.375 li
398.671 282.974 398.875 283.406 399.163 283.671 cv
399.451 283.935 399.811 284.066 400.231 284.066 cv
400.723 284.066 401.143 283.898 401.479 283.551 cv
401.815 283.215 401.995 282.783 401.995 282.279 cv
401.995 281.798 401.827 281.391 401.515 281.078 cv
401.203 280.767 400.795 280.599 400.315 280.599 cv
400.111 280.599 399.859 280.646 399.571 280.719 cv
399.691 279.794 li
399.859 279.806 li
400.303 279.806 400.711 279.698 401.071 279.458 cv
401.431 279.219 401.611 278.858 401.611 278.366 cv
401.611 277.983 401.479 277.671 401.215 277.418 cv
400.951 277.167 400.615 277.034 400.207 277.034 cv
399.799 277.034 399.451 277.167 399.175 277.418 cv
398.899 277.682 398.731 278.066 398.659 278.57 cv
397.603 278.391 li
397.723 277.682 398.023 277.13 398.479 276.746 cv
398.935 276.362 399.499 276.159 400.183 276.159 cv
400.651 276.159 401.083 276.267 401.479 276.47 cv
401.863 276.674 402.163 276.951 402.379 277.286 cv
402.595 277.634 402.703 278.007 402.703 278.391 cv
402.703 278.775 402.595 279.111 402.403 279.41 cv
402.199 279.723 401.899 279.962 401.515 280.13 cv
402.019 280.25 402.403 280.503 402.691 280.862 cv
402.979 281.234 403.123 281.702 403.123 282.254 cv
403.123 282.999 402.847 283.634 402.295 284.151 cv
401.743 284.678 401.059 284.931 400.231 284.931 cv
399.463 284.931 398.839 284.715 398.347 284.258 cv
397.843 283.815 397.567 283.238 397.495 282.518 cv
f
404.167 280.551 mo
404.167 279.543 404.263 278.727 404.479 278.103 cv
404.683 277.478 404.995 276.999 405.403 276.663 cv
405.811 276.327 406.339 276.159 406.963 276.159 cv
407.419 276.159 407.827 276.254 408.175 276.447 cv
408.511 276.638 408.799 276.902 409.027 277.25 cv
409.255 277.599 409.435 278.018 409.567 278.522 cv
409.687 279.026 409.759 279.711 409.759 280.551 cv
409.759 281.559 409.651 282.375 409.447 282.999 cv
409.243 283.622 408.931 284.09 408.523 284.427 cv
408.115 284.763 407.587 284.918 406.963 284.918 cv
406.123 284.918 405.475 284.63 405.007 284.043 cv
404.443 283.335 404.167 282.171 404.167 280.551 cv
405.247 280.551 mo
405.247 281.966 405.403 282.902 405.739 283.371 cv
406.063 283.839 406.471 284.066 406.963 284.066 cv
407.443 284.066 407.839 283.839 408.175 283.371 cv
408.511 282.902 408.679 281.966 408.679 280.551 cv
408.679 279.134 408.511 278.198 408.175 277.73 cv
407.839 277.275 407.431 277.034 406.951 277.034 cv
406.459 277.034 406.075 277.238 405.787 277.646 cv
405.427 278.174 405.247 279.146 405.247 280.551 cv
f
201.547 299.771 mo
201.547 291.179 li
202.687 291.179 li
202.687 299.771 li
201.547 299.771 li
f
206.863 298.823 mo
207.019 299.759 li
206.707 299.807 206.443 299.843 206.215 299.843 cv
205.831 299.843 205.531 299.783 205.327 299.675 cv
205.111 299.555 204.967 299.399 204.883 299.195 cv
204.787 299.003 204.751 298.583 204.751 297.947 cv
204.751 294.371 li
203.983 294.371 li
203.983 293.543 li
204.751 293.543 li
204.751 292.007 li
205.795 291.371 li
205.795 293.543 li
206.863 293.543 li
206.863 294.371 li
205.795 294.371 li
205.795 298.007 li
205.795 298.319 205.807 298.511 205.855 298.595 cv
206.035 298.799 li
206.119 298.847 206.239 298.871 206.395 298.871 cv
206.515 298.871 206.671 298.859 206.863 298.823 cv
f
212.155 297.767 mo
213.247 297.899 li
213.067 298.547 212.743 299.039 212.287 299.387 cv
211.819 299.735 211.231 299.903 210.511 299.903 cv
209.599 299.903 208.867 299.627 208.339 299.075 cv
207.811 298.523 207.547 297.731 207.547 296.711 cv
207.547 295.667 207.811 294.851 208.351 294.275 cv
208.879 293.699 209.587 293.411 210.451 293.411 cv
211.279 293.411 211.963 293.699 212.491 294.263 cv
213.019 294.827 213.283 295.619 213.283 296.651 cv
213.283 296.723 213.271 296.807 213.271 296.927 cv
208.627 296.927 li
208.663 297.623 208.855 298.139 209.203 298.499 cv
209.551 298.859 209.983 299.039 210.511 299.039 cv
210.895 299.039 211.231 298.943 211.507 298.739 cv
211.771 298.547 211.987 298.223 212.155 297.767 cv
208.687 296.063 mo
212.167 296.063 li
212.119 295.535 211.987 295.151 211.771 294.887 cv
211.435 294.479 210.991 294.275 210.463 294.275 cv
209.971 294.275 209.563 294.443 209.239 294.767 cv
208.903 295.091 208.723 295.523 208.687 296.063 cv
f
214.555 299.771 mo
214.555 293.543 li
215.503 293.543 li
215.503 294.491 li
215.743 294.059 215.959 293.771 216.175 293.627 cv
216.379 293.483 216.607 293.411 216.847 293.411 cv
217.207 293.411 217.567 293.531 217.939 293.747 cv
217.567 294.731 li
217.303 294.587 217.051 294.503 216.799 294.503 cv
216.559 294.503 216.355 294.575 216.175 294.707 cv
215.983 294.851 215.851 295.043 215.779 295.283 cv
215.659 295.667 215.611 296.075 215.611 296.519 cv
215.611 299.771 li
214.555 299.771 li
f
222.619 299.003 mo
222.223 299.339 221.851 299.579 221.491 299.711 cv
221.131 299.831 220.735 299.903 220.327 299.903 cv
219.643 299.903 219.115 299.747 218.755 299.411 cv
218.383 299.075 218.203 298.655 218.203 298.127 cv
218.203 297.827 218.263 297.551 218.407 297.299 cv
218.551 297.047 218.731 296.843 218.959 296.687 cv
219.175 296.543 219.427 296.423 219.715 296.339 cv
219.919 296.291 220.231 296.243 220.651 296.183 cv
221.503 296.087 222.127 295.967 222.535 295.823 cv
222.535 295.679 222.535 295.595 222.535 295.547 cv
222.535 295.115 222.439 294.815 222.247 294.635 cv
221.971 294.395 221.563 294.275 221.035 294.275 cv
220.531 294.275 220.171 294.371 219.931 294.539 cv
219.691 294.719 219.523 295.031 219.415 295.463 cv
218.383 295.319 li
218.479 294.887 218.635 294.527 218.851 294.251 cv
219.067 293.987 219.367 293.771 219.775 293.627 cv
220.183 293.483 220.651 293.411 221.191 293.411 cv
221.719 293.411 222.151 293.483 222.487 293.603 cv
222.823 293.723 223.063 293.879 223.219 294.071 cv
223.375 294.263 223.483 294.491 223.543 294.779 cv
223.579 294.971 223.603 295.295 223.603 295.763 cv
223.603 297.167 li
223.603 298.151 223.615 298.763 223.663 299.027 cv
223.711 299.291 223.795 299.531 223.939 299.771 cv
222.835 299.771 li
222.715 299.555 222.643 299.303 222.619 299.003 cv
222.535 296.651 mo
222.151 296.807 221.575 296.939 220.807 297.047 cv
220.375 297.119 220.063 297.191 219.883 297.263 cv
219.703 297.335 219.571 297.455 219.475 297.599 cv
219.379 297.755 219.331 297.923 219.331 298.103 cv
219.331 298.391 219.427 298.619 219.643 298.811 cv
219.859 299.003 220.171 299.087 220.579 299.087 cv
220.987 299.087 221.347 299.003 221.659 298.823 cv
221.971 298.643 222.211 298.403 222.367 298.091 cv
222.475 297.851 222.535 297.503 222.535 297.035 cv
222.535 296.651 li
f
227.539 298.823 mo
227.695 299.759 li
227.383 299.807 227.119 299.843 226.891 299.843 cv
226.507 299.843 226.207 299.783 226.003 299.675 cv
225.787 299.555 225.643 299.399 225.559 299.195 cv
225.463 299.003 225.427 298.583 225.427 297.947 cv
225.427 294.371 li
224.659 294.371 li
224.659 293.543 li
225.427 293.543 li
225.427 292.007 li
226.471 291.371 li
226.471 293.543 li
227.539 293.543 li
227.539 294.371 li
226.471 294.371 li
226.471 298.007 li
226.471 298.319 226.483 298.511 226.531 298.595 cv
226.711 298.799 li
226.795 298.847 226.915 298.871 227.071 298.871 cv
227.191 298.871 227.347 298.859 227.539 298.823 cv
f
228.571 292.391 mo
228.571 291.179 li
229.627 291.179 li
229.627 292.391 li
228.571 292.391 li
228.571 299.771 mo
228.571 293.543 li
229.627 293.543 li
229.627 299.771 li
228.571 299.771 li
f
230.839 296.663 mo
230.839 295.511 231.151 294.659 231.799 294.095 cv
232.327 293.639 232.987 293.411 233.755 293.411 cv
234.607 293.411 235.303 293.699 235.855 294.251 cv
236.395 294.815 236.671 295.583 236.671 296.567 cv
236.671 297.371 236.551 298.007 236.311 298.463 cv
236.071 298.919 235.711 299.279 235.255 299.531 cv
234.799 299.771 234.295 299.903 233.755 299.903 cv
232.879 299.903 232.171 299.627 231.643 299.075 cv
231.103 298.523 230.839 297.719 230.839 296.663 cv
231.931 296.663 mo
231.931 297.455 232.099 298.055 232.447 298.451 cv
232.783 298.847 233.227 299.039 233.755 299.039 cv
234.283 299.039 234.715 298.847 235.063 298.451 cv
235.411 298.055 235.591 297.443 235.591 296.627 cv
235.591 295.859 235.411 295.283 235.063 294.875 cv
234.703 294.479 234.271 294.275 233.755 294.275 cv
233.227 294.275 232.783 294.479 232.447 294.875 cv
232.099 295.271 231.931 295.871 231.931 296.663 cv
f
237.907 299.771 mo
237.907 293.543 li
238.855 293.543 li
238.855 294.431 li
239.311 293.759 239.971 293.411 240.835 293.411 cv
241.207 293.411 241.555 293.483 241.867 293.615 cv
242.179 293.747 242.419 293.927 242.575 294.143 cv
242.731 294.359 242.839 294.623 242.899 294.923 cv
242.935 295.115 242.959 295.463 242.959 295.943 cv
242.959 299.771 li
241.903 299.771 li
241.903 295.991 li
241.903 295.559 241.855 295.247 241.783 295.031 cv
241.699 294.815 241.555 294.647 241.351 294.515 cv
241.135 294.395 240.895 294.323 240.619 294.323 cv
240.163 294.323 239.767 294.467 239.443 294.755 cv
239.119 295.043 238.963 295.583 238.963 296.375 cv
238.963 299.771 li
237.907 299.771 li
f
244.159 297.911 mo
245.203 297.755 li
245.251 298.175 245.419 298.499 245.683 298.715 cv
245.947 298.931 246.331 299.039 246.811 299.039 cv
247.291 299.039 247.651 298.943 247.891 298.751 cv
248.119 298.559 248.239 298.319 248.239 298.055 cv
248.239 297.815 248.131 297.635 247.927 297.491 cv
247.783 297.395 247.423 297.275 246.847 297.131 cv
246.079 296.939 245.539 296.771 245.239 296.627 cv
244.939 296.483 244.711 296.291 244.555 296.039 cv
244.399 295.787 244.327 295.511 244.327 295.199 cv
244.327 294.923 244.387 294.671 244.519 294.431 cv
244.639 294.191 244.819 293.999 245.035 293.843 cv
245.203 293.723 245.419 293.627 245.707 293.543 cv
245.995 293.459 246.295 293.411 246.619 293.411 cv
247.099 293.411 247.531 293.483 247.903 293.627 cv
248.275 293.771 248.551 293.951 248.731 294.191 cv
248.899 294.431 249.019 294.755 249.091 295.151 cv
248.059 295.295 li
248.011 294.983 247.867 294.731 247.651 294.551 cv
247.423 294.371 247.111 294.275 246.703 294.275 cv
246.211 294.275 245.863 294.359 245.659 294.515 cv
245.443 294.683 245.347 294.863 245.347 295.079 cv
245.347 295.223 245.383 295.343 245.479 295.451 cv
245.563 295.571 245.695 295.655 245.887 295.727 cv
245.983 295.775 246.295 295.859 246.811 296.003 cv
247.555 296.195 248.083 296.363 248.371 296.483 cv
248.659 296.615 248.899 296.807 249.067 297.047 cv
249.235 297.287 249.319 297.587 249.319 297.947 cv
249.319 298.307 249.211 298.631 249.007 298.943 cv
248.803 299.255 248.503 299.483 248.119 299.651 cv
247.735 299.819 247.291 299.903 246.811 299.903 cv
245.995 299.903 245.383 299.747 244.963 299.411 cv
244.531 299.075 244.267 298.583 244.159 297.911 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
46.5429 248.501 mo
403.663 248.501 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
20.8314 252.798 mo
19.7754 252.798 li
19.7754 246.078 li
19.5114 246.318 19.1754 246.57 18.7675 246.81 cv
18.3594 247.05 17.9874 247.23 17.6635 247.35 cv
17.6635 246.33 li
18.2514 246.054 18.7675 245.718 19.2114 245.322 cv
19.6434 244.938 19.9555 244.554 20.1474 244.17 cv
20.8314 244.17 li
20.8314 252.798 li
f
23.5314 248.562 mo
23.5314 247.554 23.6274 246.738 23.8434 246.114 cv
24.0474 245.49 24.3594 245.01 24.7674 244.674 cv
25.1754 244.338 25.7034 244.17 26.3274 244.17 cv
26.7834 244.17 27.1914 244.266 27.5394 244.458 cv
27.8754 244.65 28.1634 244.914 28.3914 245.262 cv
28.6194 245.61 28.7994 246.03 28.9314 246.534 cv
29.0514 247.038 29.1234 247.722 29.1234 248.562 cv
29.1234 249.57 29.0154 250.386 28.8114 251.01 cv
28.6074 251.634 28.2954 252.102 27.8874 252.438 cv
27.4794 252.774 26.9514 252.93 26.3274 252.93 cv
25.4874 252.93 24.8394 252.642 24.3714 252.054 cv
23.8074 251.346 23.5314 250.182 23.5314 248.562 cv
24.6114 248.562 mo
24.6114 249.978 24.7674 250.914 25.1034 251.382 cv
25.4274 251.85 25.8354 252.078 26.3274 252.078 cv
26.8074 252.078 27.2034 251.85 27.5394 251.382 cv
27.8754 250.914 28.0434 249.978 28.0434 248.562 cv
28.0434 247.146 27.8754 246.21 27.5394 245.742 cv
27.2034 245.286 26.7954 245.046 26.3154 245.046 cv
25.8234 245.046 25.4394 245.25 25.1514 245.658 cv
24.7914 246.186 24.6114 247.158 24.6114 248.562 cv
f
30.2034 248.562 mo
30.2034 247.554 30.2994 246.738 30.5154 246.114 cv
30.7194 245.49 31.0314 245.01 31.4394 244.674 cv
31.8474 244.338 32.3754 244.17 32.9994 244.17 cv
33.4554 244.17 33.8634 244.266 34.2114 244.458 cv
34.5474 244.65 34.8354 244.914 35.0634 245.262 cv
35.2914 245.61 35.4714 246.03 35.6034 246.534 cv
35.7234 247.038 35.7954 247.722 35.7954 248.562 cv
35.7954 249.57 35.6874 250.386 35.4834 251.01 cv
35.2794 251.634 34.9674 252.102 34.5594 252.438 cv
34.1514 252.774 33.6234 252.93 32.9994 252.93 cv
32.1594 252.93 31.5114 252.642 31.0434 252.054 cv
30.4794 251.346 30.2034 250.182 30.2034 248.562 cv
31.2834 248.562 mo
31.2834 249.978 31.4394 250.914 31.7754 251.382 cv
32.0994 251.85 32.5074 252.078 32.9994 252.078 cv
33.4794 252.078 33.8754 251.85 34.2114 251.382 cv
34.5474 250.914 34.7154 249.978 34.7154 248.562 cv
34.7154 247.146 34.5474 246.21 34.2114 245.742 cv
33.8754 245.286 33.4674 245.046 32.9874 245.046 cv
32.4954 245.046 32.1114 245.25 31.8234 245.658 cv
31.4634 246.186 31.2834 247.158 31.2834 248.562 cv
f
36.8754 248.562 mo
36.8754 247.554 36.9714 246.738 37.1874 246.114 cv
37.3914 245.49 37.7034 245.01 38.1114 244.674 cv
38.5194 244.338 39.0474 244.17 39.6714 244.17 cv
40.1274 244.17 40.5354 244.266 40.8834 244.458 cv
41.2194 244.65 41.5074 244.914 41.7354 245.262 cv
41.9634 245.61 42.1434 246.03 42.2754 246.534 cv
42.3954 247.038 42.4674 247.722 42.4674 248.562 cv
42.4674 249.57 42.3594 250.386 42.1554 251.01 cv
41.9514 251.634 41.6394 252.102 41.2314 252.438 cv
40.8234 252.774 40.2954 252.93 39.6714 252.93 cv
38.8314 252.93 38.1834 252.642 37.7154 252.054 cv
37.1514 251.346 36.8754 250.182 36.8754 248.562 cv
37.9554 248.562 mo
37.9554 249.978 38.1114 250.914 38.4474 251.382 cv
38.7714 251.85 39.1794 252.078 39.6714 252.078 cv
40.1514 252.078 40.5474 251.85 40.8834 251.382 cv
41.2194 250.914 41.3874 249.978 41.3874 248.562 cv
41.3874 247.146 41.2194 246.21 40.8834 245.742 cv
40.5474 245.286 40.1394 245.046 39.6594 245.046 cv
39.1674 245.046 38.7834 245.25 38.4954 245.658 cv
38.1354 246.186 37.9554 247.158 37.9554 248.562 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
46.5429 200.117 mo
403.663 200.117 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
22.3914 203.406 mo
22.3914 204.414 li
16.7155 204.414 li
16.7034 204.162 16.7514 203.922 16.8475 203.682 cv
16.9914 203.298 17.2194 202.926 17.5315 202.542 cv
17.8435 202.17 18.3114 201.738 18.9114 201.234 cv
19.8475 200.478 20.4715 199.878 20.8074 199.422 cv
21.1315 198.978 21.2994 198.558 21.2994 198.15 cv
21.2994 197.742 21.1434 197.382 20.8434 197.094 cv
20.5434 196.806 20.1595 196.662 19.6794 196.662 cv
19.1754 196.662 18.7675 196.818 18.4674 197.118 cv
18.1554 197.43 17.9995 197.85 17.9995 198.39 cv
16.9194 198.27 li
16.9914 197.466 17.2675 196.854 17.7474 196.422 cv
18.2274 196.002 18.8874 195.786 19.7034 195.786 cv
20.5194 195.786 21.1794 196.026 21.6595 196.482 cv
22.1395 196.938 22.3794 197.502 22.3794 198.174 cv
22.3794 198.522 22.3074 198.858 22.1635 199.194 cv
22.0194 199.53 21.7915 199.878 21.4674 200.238 cv
21.1434 200.61 20.6035 201.114 19.8475 201.75 cv
19.2114 202.278 18.8034 202.638 18.6234 202.83 cv
18.4434 203.022 18.2994 203.214 18.1794 203.406 cv
22.3914 203.406 li
f
23.5314 200.178 mo
23.5314 199.17 23.6274 198.354 23.8434 197.73 cv
24.0474 197.106 24.3594 196.626 24.7674 196.29 cv
25.1754 195.954 25.7034 195.786 26.3274 195.786 cv
26.7834 195.786 27.1914 195.882 27.5394 196.074 cv
27.8754 196.266 28.1634 196.53 28.3914 196.878 cv
28.6194 197.226 28.7994 197.646 28.9314 198.15 cv
29.0514 198.654 29.1234 199.338 29.1234 200.178 cv
29.1234 201.186 29.0154 202.002 28.8114 202.626 cv
28.6074 203.25 28.2954 203.718 27.8874 204.054 cv
27.4794 204.39 26.9514 204.546 26.3274 204.546 cv
25.4874 204.546 24.8394 204.258 24.3714 203.67 cv
23.8074 202.962 23.5314 201.798 23.5314 200.178 cv
24.6114 200.178 mo
24.6114 201.594 24.7674 202.53 25.1034 202.998 cv
25.4274 203.466 25.8354 203.694 26.3274 203.694 cv
26.8074 203.694 27.2034 203.466 27.5394 202.998 cv
27.8754 202.53 28.0434 201.594 28.0434 200.178 cv
28.0434 198.762 27.8754 197.826 27.5394 197.358 cv
27.2034 196.902 26.7954 196.662 26.3154 196.662 cv
25.8234 196.662 25.4394 196.866 25.1514 197.274 cv
24.7914 197.802 24.6114 198.774 24.6114 200.178 cv
f
30.2034 200.178 mo
30.2034 199.17 30.2994 198.354 30.5154 197.73 cv
30.7194 197.106 31.0314 196.626 31.4394 196.29 cv
31.8474 195.954 32.3754 195.786 32.9994 195.786 cv
33.4554 195.786 33.8634 195.882 34.2114 196.074 cv
34.5474 196.266 34.8354 196.53 35.0634 196.878 cv
35.2914 197.226 35.4714 197.646 35.6034 198.15 cv
35.7234 198.654 35.7954 199.338 35.7954 200.178 cv
35.7954 201.186 35.6874 202.002 35.4834 202.626 cv
35.2794 203.25 34.9674 203.718 34.5594 204.054 cv
34.1514 204.39 33.6234 204.546 32.9994 204.546 cv
32.1594 204.546 31.5114 204.258 31.0434 203.67 cv
30.4794 202.962 30.2034 201.798 30.2034 200.178 cv
31.2834 200.178 mo
31.2834 201.594 31.4394 202.53 31.7754 202.998 cv
32.0994 203.466 32.5074 203.694 32.9994 203.694 cv
33.4794 203.694 33.8754 203.466 34.2114 202.998 cv
34.5474 202.53 34.7154 201.594 34.7154 200.178 cv
34.7154 198.762 34.5474 197.826 34.2114 197.358 cv
33.8754 196.902 33.4674 196.662 32.9874 196.662 cv
32.4954 196.662 32.1114 196.866 31.8234 197.274 cv
31.4634 197.802 31.2834 198.774 31.2834 200.178 cv
f
36.8754 200.178 mo
36.8754 199.17 36.9714 198.354 37.1874 197.73 cv
37.3914 197.106 37.7034 196.626 38.1114 196.29 cv
38.5194 195.954 39.0474 195.786 39.6714 195.786 cv
40.1274 195.786 40.5354 195.882 40.8834 196.074 cv
41.2194 196.266 41.5074 196.53 41.7354 196.878 cv
41.9634 197.226 42.1434 197.646 42.2754 198.15 cv
42.3954 198.654 42.4674 199.338 42.4674 200.178 cv
42.4674 201.186 42.3594 202.002 42.1554 202.626 cv
41.9514 203.25 41.6394 203.718 41.2314 204.054 cv
40.8234 204.39 40.2954 204.546 39.6714 204.546 cv
38.8314 204.546 38.1834 204.258 37.7154 203.67 cv
37.1514 202.962 36.8754 201.798 36.8754 200.178 cv
37.9554 200.178 mo
37.9554 201.594 38.1114 202.53 38.4474 202.998 cv
38.7714 203.466 39.1794 203.694 39.6714 203.694 cv
40.1514 203.694 40.5474 203.466 40.8834 202.998 cv
41.2194 202.53 41.3874 201.594 41.3874 200.178 cv
41.3874 198.762 41.2194 197.826 40.8834 197.358 cv
40.5474 196.902 40.1394 196.662 39.6594 196.662 cv
39.1674 196.662 38.7834 196.866 38.4954 197.274 cv
38.1354 197.802 37.9554 198.774 37.9554 200.178 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
46.5429 151.733 mo
403.663 151.733 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
16.8594 153.762 mo
17.9154 153.618 li
18.0354 154.218 18.2395 154.65 18.5275 154.914 cv
18.8154 155.178 19.1754 155.31 19.5954 155.31 cv
20.0875 155.31 20.5075 155.142 20.8434 154.794 cv
21.1794 154.458 21.3594 154.026 21.3594 153.522 cv
21.3594 153.042 21.1915 152.634 20.8794 152.322 cv
20.5674 152.01 20.1595 151.842 19.6794 151.842 cv
19.4755 151.842 19.2234 151.89 18.9354 151.962 cv
19.0555 151.038 li
19.2234 151.05 li
19.6674 151.05 20.0754 150.942 20.4354 150.702 cv
20.7955 150.462 20.9754 150.102 20.9754 149.61 cv
20.9754 149.226 20.8434 148.914 20.5794 148.662 cv
20.3154 148.41 19.9795 148.278 19.5714 148.278 cv
19.1635 148.278 18.8154 148.41 18.5394 148.662 cv
18.2635 148.926 18.0954 149.31 18.0234 149.814 cv
16.9674 149.634 li
17.0875 148.926 17.3874 148.374 17.8435 147.99 cv
18.2994 147.606 18.8634 147.402 19.5474 147.402 cv
20.0154 147.402 20.4474 147.51 20.8434 147.714 cv
21.2274 147.918 21.5275 148.194 21.7435 148.53 cv
21.9594 148.878 22.0674 149.25 22.0674 149.634 cv
22.0674 150.018 21.9594 150.354 21.7675 150.654 cv
21.5634 150.966 21.2635 151.206 20.8794 151.374 cv
21.3834 151.494 21.7675 151.746 22.0555 152.106 cv
22.3434 152.478 22.4874 152.946 22.4874 153.498 cv
22.4874 154.242 22.2114 154.878 21.6595 155.394 cv
21.1074 155.922 20.4235 156.174 19.5954 156.174 cv
18.8274 156.174 18.2034 155.958 17.7115 155.502 cv
17.2074 155.058 16.9314 154.482 16.8594 153.762 cv
f
23.5314 151.794 mo
23.5314 150.786 23.6274 149.97 23.8434 149.346 cv
24.0474 148.722 24.3594 148.242 24.7674 147.906 cv
25.1754 147.57 25.7034 147.402 26.3274 147.402 cv
26.7834 147.402 27.1914 147.498 27.5394 147.69 cv
27.8754 147.882 28.1634 148.146 28.3914 148.494 cv
28.6194 148.842 28.7994 149.262 28.9314 149.766 cv
29.0514 150.27 29.1234 150.954 29.1234 151.794 cv
29.1234 152.802 29.0154 153.618 28.8114 154.242 cv
28.6074 154.866 28.2954 155.334 27.8874 155.67 cv
27.4794 156.006 26.9514 156.162 26.3274 156.162 cv
25.4874 156.162 24.8394 155.874 24.3714 155.286 cv
23.8074 154.578 23.5314 153.414 23.5314 151.794 cv
24.6114 151.794 mo
24.6114 153.21 24.7674 154.146 25.1034 154.614 cv
25.4274 155.082 25.8354 155.31 26.3274 155.31 cv
26.8074 155.31 27.2034 155.082 27.5394 154.614 cv
27.8754 154.146 28.0434 153.21 28.0434 151.794 cv
28.0434 150.378 27.8754 149.442 27.5394 148.974 cv
27.2034 148.518 26.7954 148.278 26.3154 148.278 cv
25.8234 148.278 25.4394 148.482 25.1514 148.89 cv
24.7914 149.418 24.6114 150.39 24.6114 151.794 cv
f
30.2034 151.794 mo
30.2034 150.786 30.2994 149.97 30.5154 149.346 cv
30.7194 148.722 31.0314 148.242 31.4394 147.906 cv
31.8474 147.57 32.3754 147.402 32.9994 147.402 cv
33.4554 147.402 33.8634 147.498 34.2114 147.69 cv
34.5474 147.882 34.8354 148.146 35.0634 148.494 cv
35.2914 148.842 35.4714 149.262 35.6034 149.766 cv
35.7234 150.27 35.7954 150.954 35.7954 151.794 cv
35.7954 152.802 35.6874 153.618 35.4834 154.242 cv
35.2794 154.866 34.9674 155.334 34.5594 155.67 cv
34.1514 156.006 33.6234 156.162 32.9994 156.162 cv
32.1594 156.162 31.5114 155.874 31.0434 155.286 cv
30.4794 154.578 30.2034 153.414 30.2034 151.794 cv
31.2834 151.794 mo
31.2834 153.21 31.4394 154.146 31.7754 154.614 cv
32.0994 155.082 32.5074 155.31 32.9994 155.31 cv
33.4794 155.31 33.8754 155.082 34.2114 154.614 cv
34.5474 154.146 34.7154 153.21 34.7154 151.794 cv
34.7154 150.378 34.5474 149.442 34.2114 148.974 cv
33.8754 148.518 33.4674 148.278 32.9874 148.278 cv
32.4954 148.278 32.1114 148.482 31.8234 148.89 cv
31.4634 149.418 31.2834 150.39 31.2834 151.794 cv
f
36.8754 151.794 mo
36.8754 150.786 36.9714 149.97 37.1874 149.346 cv
37.3914 148.722 37.7034 148.242 38.1114 147.906 cv
38.5194 147.57 39.0474 147.402 39.6714 147.402 cv
40.1274 147.402 40.5354 147.498 40.8834 147.69 cv
41.2194 147.882 41.5074 148.146 41.7354 148.494 cv
41.9634 148.842 42.1434 149.262 42.2754 149.766 cv
42.3954 150.27 42.4674 150.954 42.4674 151.794 cv
42.4674 152.802 42.3594 153.618 42.1554 154.242 cv
41.9514 154.866 41.6394 155.334 41.2314 155.67 cv
40.8234 156.006 40.2954 156.162 39.6714 156.162 cv
38.8314 156.162 38.1834 155.874 37.7154 155.286 cv
37.1514 154.578 36.8754 153.414 36.8754 151.794 cv
37.9554 151.794 mo
37.9554 153.21 38.1114 154.146 38.4474 154.614 cv
38.7714 155.082 39.1794 155.31 39.6714 155.31 cv
40.1514 155.31 40.5474 155.082 40.8834 154.614 cv
41.2194 154.146 41.3874 153.21 41.3874 151.794 cv
41.3874 150.378 41.2194 149.442 40.8834 148.974 cv
40.5474 148.518 40.1394 148.278 39.6594 148.278 cv
39.1674 148.278 38.7834 148.482 38.4954 148.89 cv
38.1354 149.418 37.9554 150.39 37.9554 151.794 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
46.5429 103.349 mo
403.663 103.349 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
20.2314 107.646 mo
20.2314 105.594 li
16.5114 105.594 li
16.5114 104.622 li
20.4235 99.0536 li
21.2874 99.0536 li
21.2874 104.622 li
22.4515 104.622 li
22.4515 105.594 li
21.2874 105.594 li
21.2874 107.646 li
20.2314 107.646 li
20.2314 104.622 mo
20.2314 100.746 li
17.5434 104.622 li
20.2314 104.622 li
f
23.5314 103.41 mo
23.5314 102.402 23.6274 101.586 23.8434 100.962 cv
24.0474 100.338 24.3594 99.8576 24.7674 99.5216 cv
25.1754 99.1856 25.7034 99.0176 26.3274 99.0176 cv
26.7834 99.0176 27.1914 99.1136 27.5394 99.3056 cv
27.8754 99.4976 28.1634 99.7616 28.3914 100.11 cv
28.6194 100.458 28.7994 100.878 28.9314 101.382 cv
29.0514 101.886 29.1234 102.57 29.1234 103.41 cv
29.1234 104.418 29.0154 105.234 28.8114 105.858 cv
28.6074 106.482 28.2954 106.95 27.8874 107.286 cv
27.4794 107.622 26.9514 107.778 26.3274 107.778 cv
25.4874 107.778 24.8394 107.49 24.3714 106.902 cv
23.8074 106.194 23.5314 105.03 23.5314 103.41 cv
24.6114 103.41 mo
24.6114 104.826 24.7674 105.762 25.1034 106.23 cv
25.4274 106.698 25.8354 106.926 26.3274 106.926 cv
26.8074 106.926 27.2034 106.698 27.5394 106.23 cv
27.8754 105.762 28.0434 104.826 28.0434 103.41 cv
28.0434 101.994 27.8754 101.058 27.5394 100.59 cv
27.2034 100.134 26.7954 99.8936 26.3154 99.8936 cv
25.8234 99.8936 25.4394 100.098 25.1514 100.506 cv
24.7914 101.034 24.6114 102.006 24.6114 103.41 cv
f
30.2034 103.41 mo
30.2034 102.402 30.2994 101.586 30.5154 100.962 cv
30.7194 100.338 31.0314 99.8576 31.4394 99.5216 cv
31.8474 99.1856 32.3754 99.0176 32.9994 99.0176 cv
33.4554 99.0176 33.8634 99.1136 34.2114 99.3056 cv
34.5474 99.4976 34.8354 99.7616 35.0634 100.11 cv
35.2914 100.458 35.4714 100.878 35.6034 101.382 cv
35.7234 101.886 35.7954 102.57 35.7954 103.41 cv
35.7954 104.418 35.6874 105.234 35.4834 105.858 cv
35.2794 106.482 34.9674 106.95 34.5594 107.286 cv
34.1514 107.622 33.6234 107.778 32.9994 107.778 cv
32.1594 107.778 31.5114 107.49 31.0434 106.902 cv
30.4794 106.194 30.2034 105.03 30.2034 103.41 cv
31.2834 103.41 mo
31.2834 104.826 31.4394 105.762 31.7754 106.23 cv
32.0994 106.698 32.5074 106.926 32.9994 106.926 cv
33.4794 106.926 33.8754 106.698 34.2114 106.23 cv
34.5474 105.762 34.7154 104.826 34.7154 103.41 cv
34.7154 101.994 34.5474 101.058 34.2114 100.59 cv
33.8754 100.134 33.4674 99.8936 32.9874 99.8936 cv
32.4954 99.8936 32.1114 100.098 31.8234 100.506 cv
31.4634 101.034 31.2834 102.006 31.2834 103.41 cv
f
36.8754 103.41 mo
36.8754 102.402 36.9714 101.586 37.1874 100.962 cv
37.3914 100.338 37.7034 99.8576 38.1114 99.5216 cv
38.5194 99.1856 39.0474 99.0176 39.6714 99.0176 cv
40.1274 99.0176 40.5354 99.1136 40.8834 99.3056 cv
41.2194 99.4976 41.5074 99.7616 41.7354 100.11 cv
41.9634 100.458 42.1434 100.878 42.2754 101.382 cv
42.3954 101.886 42.4674 102.57 42.4674 103.41 cv
42.4674 104.418 42.3594 105.234 42.1554 105.858 cv
41.9514 106.482 41.6394 106.95 41.2314 107.286 cv
40.8234 107.622 40.2954 107.778 39.6714 107.778 cv
38.8314 107.778 38.1834 107.49 37.7154 106.902 cv
37.1514 106.194 36.8754 105.03 36.8754 103.41 cv
37.9554 103.41 mo
37.9554 104.826 38.1114 105.762 38.4474 106.23 cv
38.7714 106.698 39.1794 106.926 39.6714 106.926 cv
40.1514 106.926 40.5474 106.698 40.8834 106.23 cv
41.2194 105.762 41.3874 104.826 41.3874 103.41 cv
41.3874 101.994 41.2194 101.058 40.8834 100.59 cv
40.5474 100.134 40.1394 99.8936 39.6594 99.8936 cv
39.1674 99.8936 38.7834 100.098 38.4954 100.506 cv
38.1354 101.034 37.9554 102.006 37.9554 103.41 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
46.5429 54.9648 mo
403.663 54.9648 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
16.8594 57.0056 mo
17.9634 56.9216 li
18.0354 57.4616 18.2274 57.8696 18.5275 58.1336 cv
18.8274 58.4096 19.1875 58.5416 19.6075 58.5416 cv
20.1115 58.5416 20.5434 58.3496 20.9035 57.9656 cv
21.2514 57.5816 21.4314 57.0776 21.4314 56.4416 cv
21.4314 55.8416 21.2514 55.3736 20.9154 55.0256 cv
20.5794 54.6776 20.1355 54.4976 19.5954 54.4976 cv
19.2594 54.4976 18.9474 54.5816 18.6714 54.7376 cv
18.3955 54.8936 18.1794 55.0856 18.0354 55.3256 cv
17.0394 55.2056 li
17.8674 50.7896 li
22.1395 50.7896 li
22.1395 51.7976 li
18.7194 51.7976 li
18.2514 54.1016 li
18.7675 53.7416 19.3074 53.5616 19.8715 53.5616 cv
20.6154 53.5616 21.2514 53.8256 21.7675 54.3416 cv
22.2834 54.8696 22.5474 55.5296 22.5474 56.3456 cv
22.5474 57.1256 22.3195 57.7976 21.8634 58.3616 cv
21.3114 59.0576 20.5674 59.3936 19.6075 59.3936 cv
18.8274 59.3936 18.1915 59.1776 17.6994 58.7456 cv
17.1954 58.3136 16.9194 57.7376 16.8594 57.0056 cv
f
23.5314 55.0256 mo
23.5314 54.0176 23.6274 53.2016 23.8434 52.5776 cv
24.0474 51.9536 24.3594 51.4736 24.7674 51.1376 cv
25.1754 50.8016 25.7034 50.6336 26.3274 50.6336 cv
26.7834 50.6336 27.1914 50.7296 27.5394 50.9216 cv
27.8754 51.1136 28.1634 51.3776 28.3914 51.7256 cv
28.6194 52.0736 28.7994 52.4936 28.9314 52.9976 cv
29.0514 53.5016 29.1234 54.1856 29.1234 55.0256 cv
29.1234 56.0336 29.0154 56.8496 28.8114 57.4736 cv
28.6074 58.0976 28.2954 58.5656 27.8874 58.9016 cv
27.4794 59.2376 26.9514 59.3936 26.3274 59.3936 cv
25.4874 59.3936 24.8394 59.1056 24.3714 58.5176 cv
23.8074 57.8096 23.5314 56.6456 23.5314 55.0256 cv
24.6114 55.0256 mo
24.6114 56.4416 24.7674 57.3776 25.1034 57.8456 cv
25.4274 58.3136 25.8354 58.5416 26.3274 58.5416 cv
26.8074 58.5416 27.2034 58.3136 27.5394 57.8456 cv
27.8754 57.3776 28.0434 56.4416 28.0434 55.0256 cv
28.0434 53.6096 27.8754 52.6736 27.5394 52.2056 cv
27.2034 51.7496 26.7954 51.5096 26.3154 51.5096 cv
25.8234 51.5096 25.4394 51.7136 25.1514 52.1216 cv
24.7914 52.6496 24.6114 53.6216 24.6114 55.0256 cv
f
30.2034 55.0256 mo
30.2034 54.0176 30.2994 53.2016 30.5154 52.5776 cv
30.7194 51.9536 31.0314 51.4736 31.4394 51.1376 cv
31.8474 50.8016 32.3754 50.6336 32.9994 50.6336 cv
33.4554 50.6336 33.8634 50.7296 34.2114 50.9216 cv
34.5474 51.1136 34.8354 51.3776 35.0634 51.7256 cv
35.2914 52.0736 35.4714 52.4936 35.6034 52.9976 cv
35.7234 53.5016 35.7954 54.1856 35.7954 55.0256 cv
35.7954 56.0336 35.6874 56.8496 35.4834 57.4736 cv
35.2794 58.0976 34.9674 58.5656 34.5594 58.9016 cv
34.1514 59.2376 33.6234 59.3936 32.9994 59.3936 cv
32.1594 59.3936 31.5114 59.1056 31.0434 58.5176 cv
30.4794 57.8096 30.2034 56.6456 30.2034 55.0256 cv
31.2834 55.0256 mo
31.2834 56.4416 31.4394 57.3776 31.7754 57.8456 cv
32.0994 58.3136 32.5074 58.5416 32.9994 58.5416 cv
33.4794 58.5416 33.8754 58.3136 34.2114 57.8456 cv
34.5474 57.3776 34.7154 56.4416 34.7154 55.0256 cv
34.7154 53.6096 34.5474 52.6736 34.2114 52.2056 cv
33.8754 51.7496 33.4674 51.5096 32.9874 51.5096 cv
32.4954 51.5096 32.1114 51.7136 31.8234 52.1216 cv
31.4634 52.6496 31.2834 53.6216 31.2834 55.0256 cv
f
36.8754 55.0256 mo
36.8754 54.0176 36.9714 53.2016 37.1874 52.5776 cv
37.3914 51.9536 37.7034 51.4736 38.1114 51.1376 cv
38.5194 50.8016 39.0474 50.6336 39.6714 50.6336 cv
40.1274 50.6336 40.5354 50.7296 40.8834 50.9216 cv
41.2194 51.1136 41.5074 51.3776 41.7354 51.7256 cv
41.9634 52.0736 42.1434 52.4936 42.2754 52.9976 cv
42.3954 53.5016 42.4674 54.1856 42.4674 55.0256 cv
42.4674 56.0336 42.3594 56.8496 42.1554 57.4736 cv
41.9514 58.0976 41.6394 58.5656 41.2314 58.9016 cv
40.8234 59.2376 40.2954 59.3936 39.6714 59.3936 cv
38.8314 59.3936 38.1834 59.1056 37.7154 58.5176 cv
37.1514 57.8096 36.8754 56.6456 36.8754 55.0256 cv
37.9554 55.0256 mo
37.9554 56.4416 38.1114 57.3776 38.4474 57.8456 cv
38.7714 58.3136 39.1794 58.5416 39.6714 58.5416 cv
40.1514 58.5416 40.5474 58.3136 40.8834 57.8456 cv
41.2194 57.3776 41.3874 56.4416 41.3874 55.0256 cv
41.3874 53.6096 41.2194 52.6736 40.8834 52.2056 cv
40.5474 51.7496 40.1394 51.5096 39.6594 51.5096 cv
39.1674 51.5096 38.7834 51.7136 38.4954 52.1216 cv
38.1354 52.6496 37.9554 53.6216 37.9554 55.0256 cv
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
.8 lw
0 lc
1 lj
10 ml
[2.96 1.28 ] 0 dsh
true sadj
46.5429 6.58075 mo
403.663 6.58075 li
1 /0 /CSD get_res sepcs
.498039 sep
@
grestore
22.3314 4.38562 mo
21.2754 4.46962 li
21.1794 4.06162 21.0474 3.76162 20.8794 3.56962 cv
20.5914 3.28162 20.2314 3.12562 19.8235 3.12562 cv
19.4874 3.12562 19.1875 3.22162 18.9354 3.40162 cv
18.5994 3.64162 18.3475 4.00162 18.1554 4.45762 cv
17.9634 4.92562 17.8554 5.58562 17.8554 6.44962 cv
18.1075 6.06562 18.4194 5.78962 18.7915 5.59762 cv
19.1514 5.40562 19.5354 5.30962 19.9434 5.30962 cv
20.6395 5.30962 21.2394 5.57362 21.7314 6.08962 cv
22.2234 6.60562 22.4754 7.27762 22.4754 8.09362 cv
22.4754 8.63363 22.3554 9.13762 22.1274 9.59362 cv
21.8874 10.0616 21.5755 10.4096 21.1674 10.6496 cv
20.7594 10.8896 20.3034 11.0096 19.7874 11.0096 cv
18.8995 11.0096 18.1915 10.6976 17.6395 10.0496 cv
17.0875 9.41362 16.8114 8.34562 16.8114 6.85762 cv
16.8114 5.20162 17.1115 4.00162 17.7234 3.23362 cv
18.2514 2.58562 18.9714 2.24962 19.8834 2.24962 cv
20.5555 2.24962 21.1194 2.44162 21.5514 2.82562 cv
21.9834 3.20962 22.2355 3.72562 22.3314 4.38562 cv
18.0234 8.09362 mo
18.0234 8.45362 18.0954 8.80162 18.2514 9.13762 cv
18.3955 9.47362 18.6115 9.72562 18.8995 9.89362 cv
19.1754 10.0736 19.4634 10.1576 19.7754 10.1576 cv
20.2074 10.1576 20.5914 9.97762 20.9154 9.61762 cv
21.2274 9.25762 21.3955 8.77762 21.3955 8.15362 cv
21.3955 7.56562 21.2274 7.09762 20.9154 6.74962 cv
20.6035 6.41362 20.2074 6.23362 19.7274 6.23362 cv
19.2474 6.23362 18.8514 6.41362 18.5154 6.74962 cv
18.1794 7.09762 18.0234 7.54162 18.0234 8.09362 cv
f
23.5314 6.64162 mo
23.5314 5.63362 23.6274 4.81762 23.8434 4.19362 cv
24.0474 3.56962 24.3594 3.08962 24.7674 2.75362 cv
25.1754 2.41762 25.7034 2.24962 26.3274 2.24962 cv
26.7834 2.24962 27.1914 2.34562 27.5394 2.53762 cv
27.8754 2.72962 28.1634 2.99362 28.3914 3.34162 cv
28.6194 3.68962 28.7994 4.10962 28.9314 4.61362 cv
29.0514 5.11762 29.1234 5.80162 29.1234 6.64162 cv
29.1234 7.64962 29.0154 8.46562 28.8114 9.08962 cv
28.6074 9.71362 28.2954 10.1816 27.8874 10.5176 cv
27.4794 10.8536 26.9514 11.0096 26.3274 11.0096 cv
25.4874 11.0096 24.8394 10.7216 24.3714 10.1336 cv
23.8074 9.42562 23.5314 8.26162 23.5314 6.64162 cv
24.6114 6.64162 mo
24.6114 8.05762 24.7674 8.99362 25.1034 9.46162 cv
25.4274 9.92962 25.8354 10.1576 26.3274 10.1576 cv
26.8074 10.1576 27.2034 9.92962 27.5394 9.46162 cv
27.8754 8.99362 28.0434 8.05762 28.0434 6.64162 cv
28.0434 5.22562 27.8754 4.28962 27.5394 3.82162 cv
27.2034 3.36562 26.7954 3.12562 26.3154 3.12562 cv
25.8234 3.12562 25.4394 3.32962 25.1514 3.73762 cv
24.7914 4.26562 24.6114 5.23762 24.6114 6.64162 cv
f
30.2034 6.64162 mo
30.2034 5.63362 30.2994 4.81762 30.5154 4.19362 cv
30.7194 3.56962 31.0314 3.08962 31.4394 2.75362 cv
31.8474 2.41762 32.3754 2.24962 32.9994 2.24962 cv
33.4554 2.24962 33.8634 2.34562 34.2114 2.53762 cv
34.5474 2.72962 34.8354 2.99362 35.0634 3.34162 cv
35.2914 3.68962 35.4714 4.10962 35.6034 4.61362 cv
35.7234 5.11762 35.7954 5.80162 35.7954 6.64162 cv
35.7954 7.64962 35.6874 8.46562 35.4834 9.08962 cv
35.2794 9.71362 34.9674 10.1816 34.5594 10.5176 cv
34.1514 10.8536 33.6234 11.0096 32.9994 11.0096 cv
32.1594 11.0096 31.5114 10.7216 31.0434 10.1336 cv
30.4794 9.42562 30.2034 8.26162 30.2034 6.64162 cv
31.2834 6.64162 mo
31.2834 8.05762 31.4394 8.99362 31.7754 9.46162 cv
32.0994 9.92962 32.5074 10.1576 32.9994 10.1576 cv
33.4794 10.1576 33.8754 9.92962 34.2114 9.46162 cv
34.5474 8.99362 34.7154 8.05762 34.7154 6.64162 cv
34.7154 5.22562 34.5474 4.28962 34.2114 3.82162 cv
33.8754 3.36562 33.4674 3.12562 32.9874 3.12562 cv
32.4954 3.12562 32.1114 3.32962 31.8234 3.73762 cv
31.4634 4.26562 31.2834 5.23762 31.2834 6.64162 cv
f
36.8754 6.64162 mo
36.8754 5.63362 36.9714 4.81762 37.1874 4.19362 cv
37.3914 3.56962 37.7034 3.08962 38.1114 2.75362 cv
38.5194 2.41762 39.0474 2.24962 39.6714 2.24962 cv
40.1274 2.24962 40.5354 2.34562 40.8834 2.53762 cv
41.2194 2.72962 41.5074 2.99362 41.7354 3.34162 cv
41.9634 3.68962 42.1434 4.10962 42.2754 4.61362 cv
42.3954 5.11762 42.4674 5.80162 42.4674 6.64162 cv
42.4674 7.64962 42.3594 8.46562 42.1554 9.08962 cv
41.9514 9.71362 41.6394 10.1816 41.2314 10.5176 cv
40.8234 10.8536 40.2954 11.0096 39.6714 11.0096 cv
38.8314 11.0096 38.1834 10.7216 37.7154 10.1336 cv
37.1514 9.42562 36.8754 8.26162 36.8754 6.64162 cv
37.9554 6.64162 mo
37.9554 8.05762 38.1114 8.99362 38.4474 9.46162 cv
38.7714 9.92962 39.1794 10.1576 39.6714 10.1576 cv
40.1514 10.1576 40.5474 9.92962 40.8834 9.46162 cv
41.2194 8.99362 41.3874 8.05762 41.3874 6.64162 cv
41.3874 5.22562 41.2194 4.28962 40.8834 3.82162 cv
40.5474 3.36562 40.1394 3.12562 39.6594 3.12562 cv
39.1674 3.12562 38.7834 3.32962 38.4954 3.73762 cv
38.1354 4.26562 37.9554 5.23762 37.9554 6.64162 cv
f
9.8242 200.88 mo
2.2522 200.88 li
2.2522 203.712 li
1.2322 203.712 li
1.2322 196.896 li
2.2522 196.896 li
2.2522 199.74 li
9.8242 199.74 li
9.8242 200.88 li
f
6.7162 196.26 mo
5.5642 196.26 4.7122 195.948 4.1482 195.3 cv
3.6922 194.772 3.4642 194.112 3.4642 193.344 cv
3.4642 192.492 3.7522 191.796 4.3042 191.244 cv
4.8682 190.704 5.6362 190.428 6.6202 190.428 cv
7.4242 190.428 8.0602 190.548 8.5162 190.788 cv
8.9722 191.028 9.3322 191.388 9.5842 191.844 cv
9.8242 192.3 9.9562 192.804 9.9562 193.344 cv
9.9562 194.22 9.6802 194.928 9.1282 195.456 cv
8.5762 195.996 7.7722 196.26 6.7162 196.26 cv
6.7162 195.168 mo
7.5082 195.168 8.1082 195 8.5042 194.652 cv
8.9002 194.316 9.0922 193.872 9.0922 193.344 cv
9.0922 192.816 8.9002 192.384 8.5042 192.036 cv
8.1082 191.688 7.4962 191.508 6.6802 191.508 cv
5.9122 191.508 5.3362 191.688 4.9282 192.036 cv
4.5322 192.396 4.3282 192.828 4.3282 193.344 cv
4.3282 193.872 4.5322 194.316 4.9282 194.652 cv
5.3242 195 5.9242 195.168 6.7162 195.168 cv
f
8.8762 186.888 mo
9.8122 186.732 li
9.8602 187.044 9.8962 187.308 9.8962 187.536 cv
9.8962 187.92 9.8362 188.22 9.7282 188.424 cv
9.6082 188.64 9.4522 188.784 9.2482 188.868 cv
9.0562 188.964 8.6362 189 8.0002 189 cv
4.4242 189 li
4.4242 189.768 li
3.5962 189.768 li
3.5962 189 li
2.0602 189 li
1.4242 187.956 li
3.5962 187.956 li
3.5962 186.888 li
4.4242 186.888 li
4.4242 187.956 li
8.0602 187.956 li
8.3722 187.956 8.5642 187.944 8.6482 187.896 cv
8.8522 187.716 li
8.9002 187.632 8.9242 187.512 8.9242 187.356 cv
8.9242 187.236 8.9122 187.08 8.8762 186.888 cv
f
9.0562 181.8 mo
9.3922 182.196 9.6322 182.568 9.7642 182.928 cv
9.8842 183.288 9.9562 183.684 9.9562 184.092 cv
9.9562 184.776 9.8002 185.304 9.4642 185.664 cv
9.1282 186.036 8.7082 186.216 8.1802 186.216 cv
7.8802 186.216 7.6042 186.156 7.3522 186.012 cv
7.1002 185.868 6.8962 185.688 6.7402 185.46 cv
6.5962 185.244 6.4762 184.992 6.3922 184.704 cv
6.3442 184.5 6.2962 184.188 6.2362 183.768 cv
6.1402 182.916 6.0202 182.292 5.8762 181.884 cv
5.7322 181.884 5.6482 181.884 5.6002 181.884 cv
5.1682 181.884 4.8682 181.98 4.6882 182.172 cv
4.4482 182.448 4.3282 182.856 4.3282 183.384 cv
4.3282 183.888 4.4242 184.248 4.5922 184.488 cv
4.7722 184.728 5.0842 184.896 5.5162 185.004 cv
5.3722 186.036 li
4.9402 185.94 4.5802 185.784 4.3042 185.568 cv
4.0402 185.352 3.8242 185.052 3.6802 184.644 cv
3.5362 184.236 3.4642 183.768 3.4642 183.228 cv
3.4642 182.7 3.5362 182.268 3.6562 181.932 cv
3.7762 181.596 3.9322 181.356 4.1242 181.2 cv
4.3162 181.044 4.5442 180.936 4.8322 180.876 cv
5.0242 180.84 5.3482 180.816 5.8162 180.816 cv
7.2202 180.816 li
8.2042 180.816 8.8162 180.804 9.0802 180.756 cv
9.3442 180.708 9.5842 180.624 9.8242 180.48 cv
9.8242 181.584 li
9.6082 181.704 9.3562 181.776 9.0562 181.8 cv
6.7042 181.884 mo
6.8602 182.268 6.9922 182.844 7.1002 183.612 cv
7.1722 184.044 7.2442 184.356 7.3162 184.536 cv
7.3882 184.716 7.5082 184.848 7.6522 184.944 cv
7.8082 185.04 7.9762 185.088 8.1562 185.088 cv
8.4442 185.088 8.6722 184.992 8.8642 184.776 cv
9.0562 184.56 9.1402 184.248 9.1402 183.84 cv
9.1402 183.432 9.0562 183.072 8.8762 182.76 cv
8.6962 182.448 8.4562 182.208 8.1442 182.052 cv
7.9042 181.944 7.5562 181.884 7.0882 181.884 cv
6.7042 181.884 li
f
9.8242 179.208 mo
1.2322 179.208 li
1.2322 178.152 li
9.8242 178.152 li
9.8242 179.208 li
f
9.8242 169.152 mo
9.0442 169.152 li
9.6562 169.548 9.9562 170.124 9.9562 170.892 cv
9.9562 171.396 9.8242 171.852 9.5482 172.26 cv
9.2842 172.68 8.9002 173.004 8.4082 173.232 cv
7.9282 173.46 7.3642 173.568 6.7162 173.568 cv
6.1042 173.568 5.5402 173.472 5.0362 173.256 cv
4.5322 173.052 4.1362 172.74 3.8722 172.332 cv
3.6082 171.924 3.4642 171.456 3.4642 170.94 cv
3.4642 170.568 3.5482 170.232 3.7042 169.932 cv
3.8602 169.644 4.0642 169.404 4.3162 169.224 cv
1.2322 169.224 li
1.2322 168.168 li
9.8242 168.168 li
9.8242 169.152 li
6.7162 172.476 mo
7.5202 172.476 8.1202 172.32 8.5042 171.984 cv
8.9002 171.648 9.0922 171.252 9.0922 170.784 cv
9.0922 170.328 8.9122 169.944 8.5282 169.62 cv
8.1562 169.296 7.5802 169.128 6.8122 169.128 cv
5.9602 169.128 5.3362 169.296 4.9282 169.62 cv
4.5322 169.956 4.3282 170.352 4.3282 170.832 cv
4.3282 171.312 4.5202 171.696 4.9042 172.008 cv
5.2882 172.32 5.9002 172.476 6.7162 172.476 cv
f
7.8202 162.252 mo
7.9522 161.16 li
8.6002 161.34 9.0922 161.664 9.4402 162.12 cv
9.7882 162.588 9.9562 163.176 9.9562 163.896 cv
9.9562 164.808 9.6802 165.54 9.1282 166.068 cv
8.5762 166.596 7.7842 166.86 6.7642 166.86 cv
5.7202 166.86 4.9042 166.596 4.3282 166.056 cv
3.7522 165.528 3.4642 164.82 3.4642 163.956 cv
3.4642 163.128 3.7522 162.444 4.3162 161.916 cv
4.8802 161.388 5.6722 161.124 6.7042 161.124 cv
6.7762 161.124 6.8602 161.136 6.9802 161.136 cv
6.9802 165.78 li
7.6762 165.744 8.1922 165.552 8.5522 165.204 cv
8.9122 164.856 9.0922 164.424 9.0922 163.896 cv
9.0922 163.512 8.9962 163.176 8.7922 162.9 cv
8.6002 162.636 8.2762 162.42 7.8202 162.252 cv
6.1162 165.72 mo
6.1162 162.24 li
5.5882 162.288 5.2042 162.42 4.9402 162.636 cv
4.5322 162.972 4.3282 163.416 4.3282 163.944 cv
4.3282 164.436 4.4962 164.844 4.8202 165.168 cv
5.1442 165.504 5.5762 165.684 6.1162 165.72 cv
f
9.8242 159.864 mo
1.2322 159.864 li
1.2322 158.808 li
9.8242 158.808 li
9.8242 159.864 li
f
9.0562 153.12 mo
9.3922 153.516 9.6322 153.888 9.7642 154.248 cv
9.8842 154.608 9.9562 155.004 9.9562 155.412 cv
9.9562 156.096 9.8002 156.624 9.4642 156.984 cv
9.1282 157.356 8.7082 157.536 8.1802 157.536 cv
7.8802 157.536 7.6042 157.476 7.3522 157.332 cv
7.1002 157.188 6.8962 157.008 6.7402 156.78 cv
6.5962 156.564 6.4762 156.312 6.3922 156.024 cv
6.3442 155.82 6.2962 155.508 6.2362 155.088 cv
6.1402 154.236 6.0202 153.612 5.8762 153.204 cv
5.7322 153.204 5.6482 153.204 5.6002 153.204 cv
5.1682 153.204 4.8682 153.3 4.6882 153.492 cv
4.4482 153.768 4.3282 154.176 4.3282 154.704 cv
4.3282 155.208 4.4242 155.568 4.5922 155.808 cv
4.7722 156.048 5.0842 156.216 5.5162 156.324 cv
5.3722 157.356 li
4.9402 157.26 4.5802 157.104 4.3042 156.888 cv
4.0402 156.672 3.8242 156.372 3.6802 155.964 cv
3.5362 155.556 3.4642 155.088 3.4642 154.548 cv
3.4642 154.02 3.5362 153.588 3.6562 153.252 cv
3.7762 152.916 3.9322 152.676 4.1242 152.52 cv
4.3162 152.364 4.5442 152.256 4.8322 152.196 cv
5.0242 152.16 5.3482 152.136 5.8162 152.136 cv
7.2202 152.136 li
8.2042 152.136 8.8162 152.124 9.0802 152.076 cv
9.3442 152.028 9.5842 151.944 9.8242 151.8 cv
9.8242 152.904 li
9.6082 153.024 9.3562 153.096 9.0562 153.12 cv
6.7042 153.204 mo
6.8602 153.588 6.9922 154.164 7.1002 154.932 cv
7.1722 155.364 7.2442 155.676 7.3162 155.856 cv
7.3882 156.036 7.5082 156.168 7.6522 156.264 cv
7.8082 156.36 7.9762 156.408 8.1562 156.408 cv
8.4442 156.408 8.6722 156.312 8.8642 156.096 cv
9.0562 155.88 9.1402 155.568 9.1402 155.16 cv
9.1402 154.752 9.0562 154.392 8.8762 154.08 cv
8.6962 153.768 8.4562 153.528 8.1442 153.372 cv
7.9042 153.264 7.5562 153.204 7.0882 153.204 cv
6.7042 153.204 li
f
12.2122 150.552 mo
11.2162 150.672 li
11.2762 150.444 11.3122 150.24 11.3122 150.06 cv
11.3122 149.832 11.2642 149.652 11.1922 149.508 cv
11.1082 149.364 11.0002 149.256 10.8682 149.16 cv
10.7602 149.088 10.4962 148.98 10.0762 148.836 cv
10.0162 148.812 9.9322 148.788 9.8242 148.74 cv
3.5962 151.104 li
3.5962 149.964 li
7.2082 148.668 li
7.6642 148.5 8.1442 148.356 8.6482 148.224 cv
8.1682 148.104 7.6882 147.96 7.2322 147.792 cv
3.5962 146.46 li
3.5962 145.404 li
9.9202 147.768 li
10.5922 148.032 11.0602 148.224 11.3242 148.356 cv
11.6722 148.548 11.9242 148.764 12.0922 149.004 cv
12.2482 149.244 12.3322 149.532 12.3322 149.868 cv
12.3322 150.084 12.2842 150.312 12.2122 150.552 cv
f
9.8242 141.168 mo
3.5962 141.168 li
3.5962 140.22 li
4.4722 140.22 li
4.1722 140.028 3.9322 139.776 3.7402 139.452 cv
3.5602 139.128 3.4642 138.756 3.4642 138.336 cv
3.4642 137.88 3.5602 137.508 3.7522 137.208 cv
3.9442 136.92 4.2202 136.704 4.5562 136.584 cv
3.8362 136.092 3.4642 135.456 3.4642 134.664 cv
3.4642 134.04 3.6442 133.572 3.9802 133.236 cv
4.3162 132.9 4.8442 132.732 5.5522 132.732 cv
9.8242 132.732 li
9.8242 133.788 li
5.9002 133.788 li
5.4922 133.788 5.1922 133.824 5.0002 133.896 cv
4.8082 133.968 4.6642 134.088 4.5442 134.268 cv
4.4362 134.448 4.3762 134.652 4.3762 134.892 cv
4.3762 135.336 4.5322 135.696 4.8202 135.984 cv
5.1082 136.272 5.5762 136.416 6.2122 136.416 cv
9.8242 136.416 li
9.8242 137.472 li
5.7802 137.472 li
5.3122 137.472 4.9642 137.568 4.7242 137.736 cv
4.4962 137.904 4.3762 138.192 4.3762 138.576 cv
4.3762 138.876 4.4602 139.152 4.6162 139.404 cv
4.7722 139.656 5.0002 139.836 5.3002 139.944 cv
5.6002 140.064 6.0322 140.112 6.5962 140.112 cv
9.8242 140.112 li
9.8242 141.168 li
f
2.4442 131.173 mo
1.2322 131.173 li
1.2322 130.117 li
2.4442 130.117 li
2.4442 131.173 li
9.8242 131.173 mo
3.5962 131.173 li
3.5962 130.117 li
9.8242 130.117 li
9.8242 131.173 li
f
9.8242 128.509 mo
3.5962 128.509 li
3.5962 127.561 li
4.4842 127.561 li
3.8122 127.105 3.4642 126.445 3.4642 125.581 cv
3.4642 125.209 3.5362 124.861 3.6682 124.549 cv
3.8002 124.237 3.9802 123.997 4.1962 123.841 cv
4.4122 123.685 4.6762 123.577 4.9762 123.517 cv
5.1682 123.481 5.5162 123.457 5.9962 123.457 cv
9.8242 123.457 li
9.8242 124.513 li
6.0442 124.513 li
5.6122 124.513 5.3002 124.561 5.0842 124.633 cv
4.8682 124.717 4.7002 124.861 4.5682 125.065 cv
4.4482 125.281 4.3762 125.521 4.3762 125.797 cv
4.3762 126.253 4.5202 126.649 4.8082 126.973 cv
5.0962 127.297 5.6362 127.453 6.4282 127.453 cv
9.8242 127.453 li
9.8242 128.509 li
f
2.4442 121.837 mo
1.2322 121.837 li
1.2322 120.781 li
2.4442 120.781 li
2.4442 121.837 li
9.8242 121.837 mo
3.5962 121.837 li
3.5962 120.781 li
9.8242 120.781 li
9.8242 121.837 li
f
9.8242 119.173 mo
3.5962 119.173 li
3.5962 118.225 li
4.4722 118.225 li
4.1722 118.033 3.9322 117.781 3.7402 117.457 cv
3.5602 117.133 3.4642 116.761 3.4642 116.341 cv
3.4642 115.885 3.5602 115.513 3.7522 115.213 cv
3.9442 114.925 4.2202 114.709 4.5562 114.589 cv
3.8362 114.097 3.4642 113.461 3.4642 112.669 cv
3.4642 112.045 3.6442 111.577 3.9802 111.241 cv
4.3162 110.905 4.8442 110.737 5.5522 110.737 cv
9.8242 110.737 li
9.8242 111.793 li
5.9002 111.793 li
5.4922 111.793 5.1922 111.829 5.0002 111.901 cv
4.8082 111.973 4.6642 112.093 4.5442 112.273 cv
4.4362 112.453 4.3762 112.657 4.3762 112.897 cv
4.3762 113.341 4.5322 113.701 4.8202 113.989 cv
5.1082 114.277 5.5762 114.421 6.2122 114.421 cv
9.8242 114.421 li
9.8242 115.477 li
5.7802 115.477 li
5.3122 115.477 4.9642 115.573 4.7242 115.741 cv
4.4962 115.909 4.3762 116.197 4.3762 116.581 cv
4.3762 116.881 4.4602 117.157 4.6162 117.409 cv
4.7722 117.661 5.0002 117.841 5.3002 117.949 cv
5.6002 118.069 6.0322 118.117 6.5962 118.117 cv
9.8242 118.117 li
9.8242 119.173 li
f
2.4442 109.177 mo
1.2322 109.177 li
1.2322 108.121 li
2.4442 108.121 li
2.4442 109.177 li
9.8242 109.177 mo
3.5962 109.177 li
3.5962 108.121 li
9.8242 108.121 li
9.8242 109.177 li
f
9.8242 107.065 mo
8.9722 107.065 li
4.4242 103.105 li
4.4482 103.561 4.4602 103.969 4.4602 104.305 cv
4.4602 106.837 li
3.5962 106.837 li
3.5962 101.749 li
4.3042 101.749 li
8.2522 105.121 li
8.9722 105.769 li
8.9362 105.301 8.9122 104.857 8.9122 104.437 cv
8.9122 101.557 li
9.8242 101.557 li
9.8242 107.065 li
f
9.0562 96.4566 mo
9.3922 96.8526 9.6322 97.2246 9.7642 97.5846 cv
9.8842 97.9446 9.9562 98.3406 9.9562 98.7486 cv
9.9562 99.4326 9.8002 99.9606 9.4642 100.321 cv
9.1282 100.693 8.7082 100.873 8.1802 100.873 cv
7.8802 100.873 7.6042 100.813 7.3522 100.669 cv
7.1002 100.525 6.8962 100.345 6.7402 100.117 cv
6.5962 99.9006 6.4762 99.6486 6.3922 99.3606 cv
6.3442 99.1566 6.2962 98.8446 6.2362 98.4246 cv
6.1402 97.5726 6.0202 96.9486 5.8762 96.5406 cv
5.7322 96.5406 5.6482 96.5406 5.6002 96.5406 cv
5.1682 96.5406 4.8682 96.6366 4.6882 96.8286 cv
4.4482 97.1046 4.3282 97.5126 4.3282 98.0406 cv
4.3282 98.5446 4.4242 98.9046 4.5922 99.1446 cv
4.7722 99.3846 5.0842 99.5526 5.5162 99.6606 cv
5.3722 100.693 li
4.9402 100.597 4.5802 100.441 4.3042 100.225 cv
4.0402 100.009 3.8242 99.7086 3.6802 99.3006 cv
3.5362 98.8926 3.4642 98.4246 3.4642 97.8846 cv
3.4642 97.3566 3.5362 96.9246 3.6562 96.5886 cv
3.7762 96.2526 3.9322 96.0126 4.1242 95.8566 cv
4.3162 95.7006 4.5442 95.5926 4.8322 95.5326 cv
5.0242 95.4966 5.3482 95.4726 5.8162 95.4726 cv
7.2202 95.4726 li
8.2042 95.4726 8.8162 95.4606 9.0802 95.4126 cv
9.3442 95.3646 9.5842 95.2806 9.8242 95.1366 cv
9.8242 96.2406 li
9.6082 96.3606 9.3562 96.4326 9.0562 96.4566 cv
6.7042 96.5406 mo
6.8602 96.9246 6.9922 97.5006 7.1002 98.2686 cv
7.1722 98.7006 7.2442 99.0126 7.3162 99.1926 cv
7.3882 99.3726 7.5082 99.5046 7.6522 99.6006 cv
7.8082 99.6966 7.9762 99.7446 8.1562 99.7446 cv
8.4442 99.7446 8.6722 99.6486 8.8642 99.4326 cv
9.0562 99.2166 9.1402 98.9046 9.1402 98.4966 cv
9.1402 98.0886 9.0562 97.7286 8.8762 97.4166 cv
8.6962 97.1046 8.4562 96.8646 8.1442 96.7086 cv
7.9042 96.6006 7.5562 96.5406 7.0882 96.5406 cv
6.7042 96.5406 li
f
8.8762 91.5366 mo
9.8122 91.3806 li
9.8602 91.6926 9.8962 91.9566 9.8962 92.1846 cv
9.8962 92.5686 9.8362 92.8686 9.7282 93.0726 cv
9.6082 93.2886 9.4522 93.4326 9.2482 93.5166 cv
9.0562 93.6126 8.6362 93.6486 8.0002 93.6486 cv
4.4242 93.6486 li
4.4242 94.4166 li
3.5962 94.4166 li
3.5962 93.6486 li
2.0602 93.6486 li
1.4242 92.6046 li
3.5962 92.6046 li
3.5962 91.5366 li
4.4242 91.5366 li
4.4242 92.6046 li
8.0602 92.6046 li
8.3722 92.6046 8.5642 92.5926 8.6482 92.5446 cv
8.8522 92.3646 li
8.9002 92.2806 8.9242 92.1606 8.9242 92.0046 cv
8.9242 91.8846 8.9122 91.7286 8.8762 91.5366 cv
f
2.4442 90.5046 mo
1.2322 90.5046 li
1.2322 89.4486 li
2.4442 89.4486 li
2.4442 90.5046 li
9.8242 90.5046 mo
3.5962 90.5046 li
3.5962 89.4486 li
9.8242 89.4486 li
9.8242 90.5046 li
f
6.7162 88.2366 mo
5.5642 88.2366 4.7122 87.9246 4.1482 87.2766 cv
3.6922 86.7486 3.4642 86.0886 3.4642 85.3206 cv
3.4642 84.4686 3.7522 83.7726 4.3042 83.2206 cv
4.8682 82.6806 5.6362 82.4046 6.6202 82.4046 cv
7.4242 82.4046 8.0602 82.5246 8.5162 82.7646 cv
8.9722 83.0046 9.3322 83.3646 9.5842 83.8206 cv
9.8242 84.2766 9.9562 84.7806 9.9562 85.3206 cv
9.9562 86.1966 9.6802 86.9046 9.1282 87.4326 cv
8.5762 87.9726 7.7722 88.2366 6.7162 88.2366 cv
6.7162 87.1446 mo
7.5082 87.1446 8.1082 86.9766 8.5042 86.6286 cv
8.9002 86.2926 9.0922 85.8486 9.0922 85.3206 cv
9.0922 84.7926 8.9002 84.3606 8.5042 84.0126 cv
8.1082 83.6646 7.4962 83.4846 6.6802 83.4846 cv
5.9122 83.4846 5.3362 83.6646 4.9282 84.0126 cv
4.5322 84.3726 4.3282 84.8046 4.3282 85.3206 cv
4.3282 85.8486 4.5322 86.2926 4.9282 86.6286 cv
5.3242 86.9766 5.9242 87.1446 6.7162 87.1446 cv
f
9.8242 81.1686 mo
3.5962 81.1686 li
3.5962 80.2206 li
4.4842 80.2206 li
3.8122 79.7646 3.4642 79.1046 3.4642 78.2406 cv
3.4642 77.8686 3.5362 77.5206 3.6682 77.2086 cv
3.8002 76.8966 3.9802 76.6566 4.1962 76.5006 cv
4.4122 76.3446 4.6762 76.2366 4.9762 76.1766 cv
5.1682 76.1406 5.5162 76.1166 5.9962 76.1166 cv
9.8242 76.1166 li
9.8242 77.1726 li
6.0442 77.1726 li
5.6122 77.1726 5.3002 77.2206 5.0842 77.2926 cv
4.8682 77.3766 4.7002 77.5206 4.5682 77.7246 cv
4.4482 77.9406 4.3762 78.1806 4.3762 78.4566 cv
4.3762 78.9126 4.5202 79.3086 4.8082 79.6326 cv
5.0962 79.9566 5.6362 80.1126 6.4282 80.1126 cv
9.8242 80.1126 li
9.8242 81.1686 li
f
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
3 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.3792 -5.91611 mo
58.8574 18.618 li
71.1719 176.574 li
83.4864 216.063 li
95.8009 225.936 li
108.115 228.404 li
120.43 229.021 li
132.744 229.175 li
145.059 229.213 li
157.373 229.223 li
169.688 229.226 li
182.002 229.226 li
194.317 229.226 li
206.631 229.226 li
218.946 229.226 li
231.26 229.226 li
243.575 229.226 li
255.889 229.226 li
268.204 229.226 li
280.518 229.226 li
292.833 229.226 li
305.147 229.226 li
317.462 229.226 li
329.776 229.226 li
342.091 229.226 li
354.405 229.226 li
366.719 229.226 li
379.034 229.226 li
391.348 229.226 li
403.663 229.226 li
415.977 229.226 li
418.535 229.226 li
/1 
[/DeviceCMYK] /CSA add_res
.0573129 .86154 .8934 .00485237 cmyk
@
grestore
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
3 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.3928 -5.91611 mo
58.8574 17.9174 li
71.1719 175.827 li
83.4864 215.304 li
95.8009 225.174 li
108.115 227.641 li
120.43 228.258 li
132.744 228.412 li
145.059 228.451 li
157.373 228.46 li
169.688 228.463 li
182.002 228.463 li
194.317 228.464 li
206.631 228.464 li
218.946 228.464 li
231.26 228.464 li
243.575 228.464 li
255.889 228.464 li
268.204 228.464 li
280.518 228.464 li
292.833 228.464 li
305.147 228.464 li
317.462 228.464 li
329.776 228.464 li
342.091 228.464 li
354.405 228.464 li
366.719 228.464 li
379.034 228.464 li
391.348 228.464 li
403.663 228.464 li
415.977 228.464 li
418.535 228.464 li
.768093 .356634 .0846265 .000457771 cmyk
@
grestore
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
3 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.5284 -5.91611 mo
58.8574 10.9116 li
71.1719 168.355 li
83.4864 207.716 li
95.8009 217.556 li
108.115 220.016 li
120.43 220.631 li
132.744 220.785 li
145.059 220.824 li
157.373 220.833 li
169.688 220.836 li
182.002 220.836 li
194.317 220.836 li
206.631 220.836 li
218.946 220.836 li
231.26 220.836 li
243.575 220.836 li
255.889 220.836 li
268.204 220.836 li
280.518 220.836 li
292.833 220.836 li
305.147 220.836 li
317.462 220.836 li
329.776 220.836 li
342.091 220.836 li
354.405 220.836 li
366.719 220.836 li
379.034 220.836 li
391.348 220.836 li
403.663 220.836 li
415.977 220.836 li
418.535 220.836 li
.412482 .440681 0 0 cmyk
@
grestore
gsave
46.5429 272.693 mo
403.663 272.693 li
403.663 6.58075 li
46.5429 6.58075 li
cp
clp
3 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.8326 -5.91611 mo
58.8574 -4.65707 li
71.1719 151.751 li
83.4864 190.853 li
95.8009 200.629 li
108.115 203.073 li
120.43 203.684 li
132.744 203.836 li
145.059 203.875 li
157.373 203.884 li
169.688 203.887 li
182.002 203.887 li
194.317 203.887 li
206.631 203.887 li
218.946 203.887 li
231.26 203.887 li
243.575 203.887 li
255.889 203.887 li
268.204 203.887 li
280.518 203.887 li
292.833 203.887 li
305.147 203.887 li
317.462 203.887 li
329.776 203.887 li
342.091 203.887 li
354.405 203.887 li
366.719 203.887 li
379.034 203.887 li
391.348 203.887 li
403.663 203.887 li
415.977 203.887 li
418.535 203.887 li
1 /0 /CSD get_res sepcs
.533333 sep
@
grestore
1.25 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
46.5429 272.693 mo
46.5429 6.58075 li
@
403.663 272.693 mo
403.663 6.58075 li
@
46.5429 272.693 mo
403.663 272.693 li
@
46.5429 6.58075 mo
403.663 6.58075 li
@
3 lw
1 lc
1 lj
331.663 20.0807 mo
351.663 20.0807 li
.0573129 .86154 .8934 .00485237 cmyk
@
367.27 20.5799 mo
367.9 20.5799 li
367.144 24.4719 li
367.137 24.4859 li
367.053 24.9199 366.955 25.2139 366.85 25.3819 cv
366.745 25.5359 366.598 25.6479 366.402 25.7319 cv
366.213 25.8159 365.982 25.8579 365.709 25.8579 cv
365.471 25.8579 li
365.576 25.3259 li
365.737 25.3259 li
365.989 25.3259 366.157 25.2699 366.255 25.1719 cv
366.353 25.0669 366.444 24.8359 366.514 24.4719 cv
367.27 20.5799 li
367.564 19.0889 mo
368.194 19.0889 li
368.04 19.8869 li
367.41 19.8869 li
367.564 19.0889 li
1 /0 /CSD get_res sepcs
.85 sep
f
376.531 18.5582 mo
371.811 18.5582 li
371.811 17.7382 li
376.531 17.7382 li
376.531 18.5582 li
376.531 20.7282 mo
371.811 20.7282 li
371.811 19.9082 li
376.531 19.9082 li
376.531 20.7282 li
f
380.289 19.2382 mo
380.289 18.3982 380.369 17.7183 380.549 17.1982 cv
380.719 16.6782 380.979 16.2782 381.319 15.9982 cv
381.659 15.7182 382.099 15.5782 382.619 15.5782 cv
382.999 15.5782 383.339 15.6582 383.629 15.8182 cv
383.909 15.9782 384.149 16.1982 384.339 16.4882 cv
384.529 16.7782 384.679 17.1283 384.789 17.5482 cv
384.889 17.9683 384.949 18.5382 384.949 19.2382 cv
384.949 20.0782 384.859 20.7582 384.689 21.2782 cv
384.519 21.7983 384.259 22.1882 383.919 22.4683 cv
383.579 22.7482 383.139 22.8783 382.619 22.8783 cv
381.919 22.8783 381.379 22.6383 380.989 22.1482 cv
380.519 21.5583 380.289 20.5882 380.289 19.2382 cv
381.189 19.2382 mo
381.189 20.4182 381.319 21.1982 381.599 21.5882 cv
381.869 21.9782 382.209 22.1682 382.619 22.1682 cv
383.019 22.1682 383.349 21.9782 383.629 21.5882 cv
383.909 21.1982 384.049 20.4182 384.049 19.2382 cv
384.049 18.0582 383.909 17.2782 383.629 16.8882 cv
383.349 16.5082 383.009 16.3082 382.609 16.3082 cv
382.199 16.3082 381.879 16.4782 381.639 16.8182 cv
381.339 17.2582 381.189 18.0682 381.189 19.2382 cv
f
386.341 22.7682 mo
386.341 21.7682 li
387.341 21.7682 li
387.341 22.7682 li
386.341 22.7682 li
f
391.939 22.7682 mo
391.059 22.7682 li
391.059 17.1682 li
390.839 17.3682 390.559 17.5782 390.219 17.7782 cv
389.879 17.9782 389.569 18.1283 389.299 18.2282 cv
389.299 17.3783 li
389.789 17.1482 390.219 16.8682 390.589 16.5382 cv
390.949 16.2182 391.209 15.8982 391.369 15.5782 cv
391.939 15.5782 li
391.939 22.7682 li
f
363.753 20.2282 mo
363.763 19.0982 li
363.763 18.3382 363.473 17.9482 362.893 17.9382 cv
362.453 17.9382 362.103 18.1182 361.843 18.4782 cv
361.503 18.9282 361.273 19.4482 361.163 20.0382 cv
361.023 20.7582 361.033 21.2882 361.213 21.6283 cv
361.393 21.9782 361.683 22.1482 362.083 22.1482 cv
362.513 22.1482 362.913 21.8083 363.283 21.1082 cv
363.753 20.2282 li
363.043 17.1782 mo
364.063 17.1582 364.563 17.6782 364.553 18.7282 cv
364.553 18.7282 364.803 18.2582 365.313 17.2983 cv
366.113 17.2983 li
364.533 20.2682 li
364.523 21.3282 li
364.523 21.4882 364.563 21.6383 364.653 21.7682 cv
364.753 21.9282 364.853 22.0082 364.963 22.0082 cv
365.393 22.0082 li
365.253 22.7682 li
364.703 22.7682 li
364.393 22.7682 364.133 22.6383 363.913 22.3582 cv
363.813 22.2183 363.753 22.0082 363.753 21.7282 cv
363.533 22.0782 363.253 22.3982 362.893 22.6882 cv
362.713 22.8182 362.393 22.8783 361.933 22.8783 cv
361.173 22.8682 360.653 22.6283 360.373 22.1482 cv
360.093 21.6482 360.033 20.9382 360.213 20.0382 cv
360.393 19.0782 360.743 18.3682 361.243 17.9282 cv
361.793 17.4382 362.393 17.1882 363.043 17.1782 cv
f
331.663 37.0807 mo
351.663 37.0807 li
.768093 .356634 .0846265 .000457771 cmyk
@
367.27 37.5799 mo
367.9 37.5799 li
367.144 41.4719 li
367.137 41.4859 li
367.053 41.9199 366.955 42.2139 366.85 42.3819 cv
366.745 42.5359 366.598 42.6479 366.402 42.7319 cv
366.213 42.8159 365.982 42.8579 365.709 42.8579 cv
365.471 42.8579 li
365.576 42.3259 li
365.737 42.3259 li
365.989 42.3259 366.157 42.2699 366.255 42.1719 cv
366.353 42.0669 366.444 41.8359 366.514 41.4719 cv
367.27 37.5799 li
367.564 36.0889 mo
368.194 36.0889 li
368.04 36.8869 li
367.41 36.8869 li
367.564 36.0889 li
1 /0 /CSD get_res sepcs
.85 sep
f
376.531 35.5583 mo
371.811 35.5583 li
371.811 34.7383 li
376.531 34.7383 li
376.531 35.5583 li
376.531 37.7282 mo
371.811 37.7282 li
371.811 36.9082 li
376.531 36.9082 li
376.531 37.7282 li
f
383.599 39.7682 mo
382.719 39.7682 li
382.719 34.1683 li
382.499 34.3682 382.219 34.5782 381.879 34.7782 cv
381.539 34.9782 381.229 35.1283 380.959 35.2282 cv
380.959 34.3783 li
381.449 34.1483 381.879 33.8682 382.249 33.5382 cv
382.609 33.2183 382.869 32.8983 383.029 32.5782 cv
383.599 32.5782 li
383.599 39.7682 li
f
363.753 37.2282 mo
363.763 36.0983 li
363.763 35.3382 363.473 34.9482 362.893 34.9382 cv
362.453 34.9382 362.103 35.1182 361.843 35.4782 cv
361.503 35.9282 361.273 36.4482 361.163 37.0382 cv
361.023 37.7583 361.033 38.2882 361.213 38.6283 cv
361.393 38.9782 361.683 39.1483 362.083 39.1483 cv
362.513 39.1483 362.913 38.8083 363.283 38.1082 cv
363.753 37.2282 li
363.043 34.1782 mo
364.063 34.1582 364.563 34.6782 364.553 35.7282 cv
364.553 35.7282 364.803 35.2583 365.313 34.2982 cv
366.113 34.2982 li
364.533 37.2682 li
364.523 38.3283 li
364.523 38.4883 364.563 38.6382 364.653 38.7682 cv
364.753 38.9282 364.853 39.0083 364.963 39.0083 cv
365.393 39.0083 li
365.253 39.7682 li
364.703 39.7682 li
364.393 39.7682 364.133 39.6382 363.913 39.3582 cv
363.813 39.2183 363.753 39.0083 363.753 38.7282 cv
363.533 39.0783 363.253 39.3983 362.893 39.6882 cv
362.713 39.8182 362.393 39.8783 361.933 39.8783 cv
361.173 39.8682 360.653 39.6283 360.373 39.1483 cv
360.093 38.6483 360.033 37.9382 360.213 37.0382 cv
360.393 36.0783 360.743 35.3682 361.243 34.9282 cv
361.793 34.4382 362.393 34.1882 363.043 34.1782 cv
f
331.663 54.0808 mo
351.663 54.0808 li
.412482 .440681 0 0 cmyk
@
367.27 54.5799 mo
367.9 54.5799 li
367.144 58.4719 li
367.137 58.4859 li
367.053 58.9199 366.955 59.2139 366.85 59.3819 cv
366.745 59.5359 366.598 59.6479 366.402 59.7319 cv
366.213 59.8159 365.982 59.8579 365.709 59.8579 cv
365.471 59.8579 li
365.576 59.3259 li
365.737 59.3259 li
365.989 59.3259 366.157 59.2699 366.255 59.1719 cv
366.353 59.0669 366.444 58.8359 366.514 58.4719 cv
367.27 54.5799 li
367.564 53.0889 mo
368.194 53.0889 li
368.04 53.8869 li
367.41 53.8869 li
367.564 53.0889 li
1 /0 /CSD get_res sepcs
.85 sep
f
376.531 52.5583 mo
371.811 52.5583 li
371.811 51.7383 li
376.531 51.7383 li
376.531 52.5583 li
376.531 54.7283 mo
371.811 54.7283 li
371.811 53.9083 li
376.531 53.9083 li
376.531 54.7283 li
f
383.599 56.7683 mo
382.719 56.7683 li
382.719 51.1683 li
382.499 51.3683 382.219 51.5783 381.879 51.7783 cv
381.539 51.9783 381.229 52.1283 380.959 52.2283 cv
380.959 51.3783 li
381.449 51.1483 381.879 50.8683 382.249 50.5383 cv
382.609 50.2183 382.869 49.8983 383.029 49.5783 cv
383.599 49.5783 li
383.599 56.7683 li
f
385.851 53.2383 mo
385.851 52.3983 385.931 51.7183 386.111 51.1983 cv
386.281 50.6783 386.541 50.2783 386.881 49.9983 cv
387.221 49.7183 387.661 49.5783 388.181 49.5783 cv
388.561 49.5783 388.901 49.6583 389.191 49.8183 cv
389.471 49.9783 389.711 50.1983 389.901 50.4883 cv
390.091 50.7783 390.241 51.1283 390.351 51.5483 cv
390.451 51.9683 390.511 52.5383 390.511 53.2383 cv
390.511 54.0783 390.421 54.7583 390.251 55.2783 cv
390.081 55.7983 389.821 56.1883 389.481 56.4683 cv
389.141 56.7483 388.701 56.8783 388.181 56.8783 cv
387.481 56.8783 386.941 56.6383 386.551 56.1483 cv
386.081 55.5583 385.851 54.5883 385.851 53.2383 cv
386.751 53.2383 mo
386.751 54.4183 386.881 55.1983 387.161 55.5883 cv
387.431 55.9783 387.771 56.1683 388.181 56.1683 cv
388.581 56.1683 388.911 55.9783 389.191 55.5883 cv
389.471 55.1983 389.611 54.4183 389.611 53.2383 cv
389.611 52.0583 389.471 51.2783 389.191 50.8883 cv
388.911 50.5083 388.571 50.3083 388.171 50.3083 cv
387.761 50.3083 387.441 50.4783 387.201 50.8183 cv
386.901 51.2583 386.751 52.0683 386.751 53.2383 cv
f
363.753 54.2283 mo
363.763 53.0983 li
363.763 52.3383 363.473 51.9483 362.893 51.9383 cv
362.453 51.9383 362.103 52.1183 361.843 52.4783 cv
361.503 52.9283 361.273 53.4483 361.163 54.0383 cv
361.023 54.7583 361.033 55.2883 361.213 55.6283 cv
361.393 55.9783 361.683 56.1483 362.083 56.1483 cv
362.513 56.1483 362.913 55.8083 363.283 55.1083 cv
363.753 54.2283 li
363.043 51.1783 mo
364.063 51.1583 364.563 51.6783 364.553 52.7283 cv
364.553 52.7283 364.803 52.2583 365.313 51.2983 cv
366.113 51.2983 li
364.533 54.2683 li
364.523 55.3283 li
364.523 55.4883 364.563 55.6383 364.653 55.7683 cv
364.753 55.9283 364.853 56.0083 364.963 56.0083 cv
365.393 56.0083 li
365.253 56.7683 li
364.703 56.7683 li
364.393 56.7683 364.133 56.6383 363.913 56.3583 cv
363.813 56.2183 363.753 56.0083 363.753 55.7283 cv
363.533 56.0783 363.253 56.3983 362.893 56.6883 cv
362.713 56.8183 362.393 56.8783 361.933 56.8783 cv
361.173 56.8683 360.653 56.6283 360.373 56.1483 cv
360.093 55.6483 360.033 54.9383 360.213 54.0383 cv
360.393 53.0783 360.743 52.3683 361.243 51.9283 cv
361.793 51.4383 362.393 51.1883 363.043 51.1783 cv
f
331.663 71.0808 mo
351.663 71.0808 li
1 /0 /CSD get_res sepcs
.533333 sep
@
367.27 71.5799 mo
367.9 71.5799 li
367.144 75.4719 li
367.137 75.4859 li
367.053 75.9199 366.955 76.2139 366.85 76.3819 cv
366.745 76.5359 366.598 76.6479 366.402 76.7319 cv
366.213 76.8159 365.982 76.8579 365.709 76.8579 cv
365.471 76.8579 li
365.576 76.3259 li
365.737 76.3259 li
365.989 76.3259 366.157 76.2699 366.255 76.1719 cv
366.353 76.0669 366.444 75.8359 366.514 75.4719 cv
367.27 71.5799 li
367.564 70.0889 mo
368.194 70.0889 li
368.04 70.8869 li
367.41 70.8869 li
367.564 70.0889 li
1 /0 /CSD get_res sepcs
.85 sep
f
376.531 69.5583 mo
371.811 69.5583 li
371.811 68.7383 li
376.531 68.7383 li
376.531 69.5583 li
376.531 71.7283 mo
371.811 71.7283 li
371.811 70.9083 li
376.531 70.9083 li
376.531 71.7283 li
f
380.289 71.8783 mo
381.169 71.7583 li
381.269 72.2583 381.439 72.6183 381.679 72.8383 cv
381.919 73.0583 382.219 73.1683 382.569 73.1683 cv
382.979 73.1683 383.329 73.0283 383.609 72.7383 cv
383.889 72.4583 384.039 72.0983 384.039 71.6783 cv
384.039 71.2783 383.899 70.9383 383.639 70.6783 cv
383.379 70.4183 383.039 70.2783 382.639 70.2783 cv
382.469 70.2783 382.259 70.3183 382.019 70.3783 cv
382.119 69.6083 li
382.259 69.6183 li
382.629 69.6183 382.969 69.5283 383.269 69.3283 cv
383.569 69.1283 383.719 68.8283 383.719 68.4183 cv
383.719 68.0983 383.609 67.8383 383.389 67.6283 cv
383.169 67.4183 382.889 67.3083 382.549 67.3083 cv
382.209 67.3083 381.919 67.4183 381.689 67.6283 cv
381.459 67.8483 381.319 68.1683 381.259 68.5883 cv
380.379 68.4383 li
380.479 67.8483 380.729 67.3883 381.109 67.0683 cv
381.489 66.7483 381.959 66.5783 382.529 66.5783 cv
382.919 66.5783 383.279 66.6683 383.609 66.8383 cv
383.929 67.0083 384.179 67.2383 384.359 67.5183 cv
384.539 67.8083 384.629 68.1183 384.629 68.4383 cv
384.629 68.7583 384.539 69.0383 384.379 69.2883 cv
384.209 69.5483 383.959 69.7483 383.639 69.8883 cv
384.059 69.9883 384.379 70.1983 384.619 70.4983 cv
384.859 70.8083 384.979 71.1983 384.979 71.6583 cv
384.979 72.2783 384.749 72.8083 384.289 73.2383 cv
383.829 73.6783 383.259 73.8883 382.569 73.8883 cv
381.929 73.8883 381.409 73.7083 380.999 73.3283 cv
380.579 72.9583 380.349 72.4783 380.289 71.8783 cv
f
385.851 70.2383 mo
385.851 69.3983 385.931 68.7183 386.111 68.1983 cv
386.281 67.6783 386.541 67.2783 386.881 66.9983 cv
387.221 66.7183 387.661 66.5783 388.181 66.5783 cv
388.561 66.5783 388.901 66.6583 389.191 66.8183 cv
389.471 66.9783 389.711 67.1983 389.901 67.4883 cv
390.091 67.7783 390.241 68.1283 390.351 68.5483 cv
390.451 68.9683 390.511 69.5383 390.511 70.2383 cv
390.511 71.0783 390.421 71.7583 390.251 72.2783 cv
390.081 72.7983 389.821 73.1883 389.481 73.4683 cv
389.141 73.7483 388.701 73.8783 388.181 73.8783 cv
387.481 73.8783 386.941 73.6383 386.551 73.1483 cv
386.081 72.5583 385.851 71.5883 385.851 70.2383 cv
386.751 70.2383 mo
386.751 71.4183 386.881 72.1983 387.161 72.5883 cv
387.431 72.9783 387.771 73.1683 388.181 73.1683 cv
388.581 73.1683 388.911 72.9783 389.191 72.5883 cv
389.471 72.1983 389.611 71.4183 389.611 70.2383 cv
389.611 69.0583 389.471 68.2783 389.191 67.8883 cv
388.911 67.5083 388.571 67.3083 388.171 67.3083 cv
387.761 67.3083 387.441 67.4783 387.201 67.8183 cv
386.901 68.2583 386.751 69.0683 386.751 70.2383 cv
f
363.753 71.2283 mo
363.763 70.0983 li
363.763 69.3383 363.473 68.9483 362.893 68.9383 cv
362.453 68.9383 362.103 69.1183 361.843 69.4783 cv
361.503 69.9283 361.273 70.4483 361.163 71.0383 cv
361.023 71.7583 361.033 72.2883 361.213 72.6283 cv
361.393 72.9783 361.683 73.1483 362.083 73.1483 cv
362.513 73.1483 362.913 72.8083 363.283 72.1083 cv
363.753 71.2283 li
363.043 68.1783 mo
364.063 68.1583 364.563 68.6783 364.553 69.7283 cv
364.553 69.7283 364.803 69.2583 365.313 68.2983 cv
366.113 68.2983 li
364.533 71.2683 li
364.523 72.3283 li
364.523 72.4883 364.563 72.6383 364.653 72.7683 cv
364.753 72.9283 364.853 73.0083 364.963 73.0083 cv
365.393 73.0083 li
365.253 73.7683 li
364.703 73.7683 li
364.393 73.7683 364.133 73.6383 363.913 73.3583 cv
363.813 73.2183 363.753 73.0083 363.753 72.7283 cv
363.533 73.0783 363.253 73.3983 362.893 73.6883 cv
362.713 73.8183 362.393 73.8783 361.933 73.8783 cv
361.173 73.8683 360.653 73.6283 360.373 73.1483 cv
360.093 72.6483 360.033 71.9383 360.213 71.0383 cv
360.393 70.0783 360.743 69.3683 361.243 68.9283 cv
361.793 68.4383 362.393 68.1883 363.043 68.1783 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
